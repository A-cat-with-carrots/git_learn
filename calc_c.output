状态 33 冲突：1 项偏移/归约
状态 130 冲突：1 项偏移/归约
状态 166 冲突：1 项偏移/归约


语法

    0 $accept: program $end

    1 program: compunit

    2 compunit: decl compunit
    3         | funcdef compunit
    4         | decl
    5         | funcdef

    6 decl: constdecl
    7     | vardecl

    8 constdecl: TOK_CONST TOK_INT constdef constdecl_ TOK_SEMICOLON

    9 constdecl_: TOK_COMMA constdef constdecl_
   10           | %empty

   11 constdef: IDENT
   12         | constdef TOK_LSQUARE INTCONST TOK_RSQUARE
   13         | constdef TOK_ASSIGN constinitval

   14 constinitval: constexp
   15             | TOK_LBRACKET TOK_RBRACKET
   16             | TOK_LBRACKET constinitval constinitval_ TOK_RBRACKET

   17 constinitval_: TOK_COMMA constinitval constinitval_
   18              | %empty

   19 vardecl: TOK_INT vardef vardecl_ TOK_SEMICOLON

   20 vardecl_: TOK_COMMA vardef vardecl_
   21         | %empty

   22 vardef: IDENT
   23       | vardef TOK_LSQUARE INTCONST TOK_RSQUARE
   24       | vardef TOK_ASSIGN initval

   25 initval: exp
   26        | TOK_LBRACKET exp initval_ TOK_RBRACKET initval
   27        | TOK_LBRACKET TOK_RBRACKET
   28        | %empty

   29 initval_: TOK_COMMA exp initval_
   30         | %empty

   31 funcdef: TOK_INT IDENT TOK_LPAR funcfparams TOK_RPAR block
   32        | TOK_VOID IDENT TOK_LPAR funcfparams TOK_RPAR block
   33        | TOK_INT IDENT TOK_LPAR TOK_RPAR block
   34        | TOK_VOID IDENT TOK_LPAR TOK_RPAR block

   35 funcfparams: funcfparam TOK_COMMA funcfparams
   36            | funcfparam

   37 funcfparam: TOK_INT IDENT TOK_LSQUARE TOK_RSQUARE funcfparam_
   38           | TOK_INT IDENT

   39 funcfparam_: TOK_LSQUARE INTCONST TOK_RSQUARE funcfparam_
   40            | %empty

   41 block: TOK_LBRACKET block_ TOK_RBRACKET

   42 block_: blockitem block_
   43       | %empty

   44 blockitem: decl
   45          | stmt

   46 stmt: lval TOK_ASSIGN exp TOK_SEMICOLON
   47     | TOK_SEMICOLON
   48     | exp TOK_SEMICOLON
   49     | block
   50     | TOK_IF TOK_LPAR cond TOK_RPAR stmt
   51     | TOK_IF TOK_LPAR cond TOK_RPAR stmt TOK_ELSE stmt
   52     | TOK_WHILE TOK_LPAR cond TOK_RPAR stmt
   53     | TOK_BREAK TOK_SEMICOLON
   54     | TOK_CONTINUE TOK_SEMICOLON
   55     | TOK_RETURN TOK_SEMICOLON
   56     | TOK_RETURN exp TOK_SEMICOLON

   57 exp: addexp

   58 cond: lorexp

   59 lval: IDENT lval_

   60 lval_: TOK_LSQUARE exp TOK_RSQUARE lval_
   61      | %empty

   62 primaryexp: TOK_LPAR exp TOK_RPAR
   63           | lval
   64           | number

   65 number: INTCONST

   66 unaryexp: primaryexp
   67         | IDENT TOK_LPAR funcrparams TOK_RPAR
   68         | IDENT TOK_LPAR TOK_RPAR
   69         | unaryop unaryexp

   70 unaryop: TOK_ADD
   71        | TOK_SUB
   72        | TOK_NOT

   73 funcrparams: exp TOK_COMMA funcrparams
   74            | exp

   75 mulexp: unaryexp
   76       | mulexp TOK_MUL unaryexp
   77       | mulexp TOK_DIV unaryexp
   78       | mulexp TOK_MODULO unaryexp

   79 addexp: mulexp
   80       | addexp TOK_ADD addexp
   81       | addexp TOK_SUB addexp

   82 relexp: addexp
   83       | relexp TOK_LESS addexp
   84       | relexp TOK_GREAT addexp
   85       | relexp TOK_LESSEQ addexp
   86       | relexp TOK_GREATEQ addexp

   87 eqexp: relexp
   88      | eqexp TOK_EQ relexp
   89      | eqexp TOK_NOTEQ relexp

   90 landexp: eqexp
   91        | landexp TOK_AND eqexp

   92 lorexp: landexp
   93       | lorexp TOK_OR landexp

   94 constexp: addexp


终结语词，附有它们出现处的规则

    $end (0) 0
    error (256)
    TOK_OR (258) 93
    TOK_AND (259) 91
    TOK_ADD (260) 70 80
    TOK_SUB (261) 71 81
    TOK_MUL (262) 76
    TOK_DIV (263) 77
    TOK_MODULO (264) 78
    TOK_LESS <type_id> (265) 83
    TOK_LESSEQ <type_id> (266) 85
    TOK_GREAT <type_id> (267) 84
    TOK_GREATEQ <type_id> (268) 86
    TOK_NOTEQ <type_id> (269) 89
    TOK_EQ <type_id> (270) 88
    TOK_ASSIGN (271) 13 24 46
    TOK_NOT (272) 72
    INTCONST <type_int> (273) 12 23 39 65
    IDENT <type_id> (274) 11 22 31 32 33 34 37 38 59 67 68
    TOK_INT <type_id> (275) 8 19 31 33 37 38
    TOK_VOID <type_id> (276) 32 34
    TOK_CONST <type_id> (277) 8
    TOK_LPAR (278) 31 32 33 34 50 51 52 62 67 68
    TOK_RPAR (279) 31 32 33 34 50 51 52 62 67 68
    TOK_LBRACKET (280) 15 16 26 27 41
    TOK_RBRACKET (281) 15 16 26 27 41
    TOK_LSQUARE (282) 12 23 37 39 60
    TOK_RSQUARE (283) 12 23 37 39 60
    TOK_COMMA (284) 9 17 20 29 35 73
    TOK_SEMICOLON (285) 8 19 46 47 48 53 54 55 56
    TOK_BREAK (286) 53
    TOK_CONTINUE (287) 54
    TOK_IF (288) 50 51
    TOK_ELSE (289) 51
    TOK_WHILE (290) 52
    TOK_RETURN (291) 55 56


非终结语词，附有它们出现处的规则

    $accept (37)
        on left: 0
    program <ptr> (38)
        on left: 1
        on right: 0
    compunit <ptr> (39)
        on left: 2 3 4 5
        on right: 1 2 3
    decl <ptr> (40)
        on left: 6 7
        on right: 2 4 44
    constdecl <ptr> (41)
        on left: 8
        on right: 6
    constdecl_ <ptr> (42)
        on left: 9 10
        on right: 8 9
    constdef <ptr> (43)
        on left: 11 12 13
        on right: 8 9 12 13
    constinitval <ptr> (44)
        on left: 14 15 16
        on right: 13 16 17
    constinitval_ <ptr> (45)
        on left: 17 18
        on right: 16 17
    vardecl <ptr> (46)
        on left: 19
        on right: 7
    vardecl_ <ptr> (47)
        on left: 20 21
        on right: 19 20
    vardef <ptr> (48)
        on left: 22 23 24
        on right: 19 20 23 24
    initval <ptr> (49)
        on left: 25 26 27 28
        on right: 24 26
    initval_ <ptr> (50)
        on left: 29 30
        on right: 26 29
    funcdef <ptr> (51)
        on left: 31 32 33 34
        on right: 3 5
    funcfparams <ptr> (52)
        on left: 35 36
        on right: 31 32 35
    funcfparam <ptr> (53)
        on left: 37 38
        on right: 35 36
    funcfparam_ <ptr> (54)
        on left: 39 40
        on right: 37 39
    block <ptr> (55)
        on left: 41
        on right: 31 32 33 34 49
    block_ <ptr> (56)
        on left: 42 43
        on right: 41 42
    blockitem <ptr> (57)
        on left: 44 45
        on right: 42
    stmt <ptr> (58)
        on left: 46 47 48 49 50 51 52 53 54 55 56
        on right: 45 50 51 52
    exp <ptr> (59)
        on left: 57
        on right: 25 26 29 46 48 56 60 62 73 74
    cond <ptr> (60)
        on left: 58
        on right: 50 51 52
    lval <ptr> (61)
        on left: 59
        on right: 46 63
    lval_ <ptr> (62)
        on left: 60 61
        on right: 59 60
    primaryexp <ptr> (63)
        on left: 62 63 64
        on right: 66
    number <ptr> (64)
        on left: 65
        on right: 64
    unaryexp <ptr> (65)
        on left: 66 67 68 69
        on right: 69 75 76 77 78
    unaryop <ptr> (66)
        on left: 70 71 72
        on right: 69
    funcrparams <ptr> (67)
        on left: 73 74
        on right: 67 73
    mulexp <ptr> (68)
        on left: 75 76 77 78
        on right: 76 77 78 79
    addexp <ptr> (69)
        on left: 79 80 81
        on right: 57 80 81 82 83 84 85 86 94
    relexp <ptr> (70)
        on left: 82 83 84 85 86
        on right: 83 84 85 86 87 88 89
    eqexp <ptr> (71)
        on left: 87 88 89
        on right: 88 89 90 91
    landexp <ptr> (72)
        on left: 90 91
        on right: 91 92 93
    lorexp <ptr> (73)
        on left: 92 93
        on right: 58 93
    constexp <ptr> (74)
        on left: 94
        on right: 14


状态 0

    0 $accept: . program $end

    TOK_INT    偏移，并进入状态 1
    TOK_VOID   偏移，并进入状态 2
    TOK_CONST  偏移，并进入状态 3

    program    转到状态 4
    compunit   转到状态 5
    decl       转到状态 6
    constdecl  转到状态 7
    vardecl    转到状态 8
    funcdef    转到状态 9


状态 1

   19 vardecl: TOK_INT . vardef vardecl_ TOK_SEMICOLON
   31 funcdef: TOK_INT . IDENT TOK_LPAR funcfparams TOK_RPAR block
   33        | TOK_INT . IDENT TOK_LPAR TOK_RPAR block

    IDENT  偏移，并进入状态 10

    vardef  转到状态 11


状态 2

   32 funcdef: TOK_VOID . IDENT TOK_LPAR funcfparams TOK_RPAR block
   34        | TOK_VOID . IDENT TOK_LPAR TOK_RPAR block

    IDENT  偏移，并进入状态 12


状态 3

    8 constdecl: TOK_CONST . TOK_INT constdef constdecl_ TOK_SEMICOLON

    TOK_INT  偏移，并进入状态 13


状态 4

    0 $accept: program . $end

    $end  偏移，并进入状态 14


状态 5

    1 program: compunit .

    $default  使用规则 1 以归约 (program)


状态 6

    2 compunit: decl . compunit
    4         | decl .

    TOK_INT    偏移，并进入状态 1
    TOK_VOID   偏移，并进入状态 2
    TOK_CONST  偏移，并进入状态 3

    $default  使用规则 4 以归约 (compunit)

    compunit   转到状态 15
    decl       转到状态 6
    constdecl  转到状态 7
    vardecl    转到状态 8
    funcdef    转到状态 9


状态 7

    6 decl: constdecl .

    $default  使用规则 6 以归约 (decl)


状态 8

    7 decl: vardecl .

    $default  使用规则 7 以归约 (decl)


状态 9

    3 compunit: funcdef . compunit
    5         | funcdef .

    TOK_INT    偏移，并进入状态 1
    TOK_VOID   偏移，并进入状态 2
    TOK_CONST  偏移，并进入状态 3

    $default  使用规则 5 以归约 (compunit)

    compunit   转到状态 16
    decl       转到状态 6
    constdecl  转到状态 7
    vardecl    转到状态 8
    funcdef    转到状态 9


状态 10

   22 vardef: IDENT .
   31 funcdef: TOK_INT IDENT . TOK_LPAR funcfparams TOK_RPAR block
   33        | TOK_INT IDENT . TOK_LPAR TOK_RPAR block

    TOK_LPAR  偏移，并进入状态 17

    $default  使用规则 22 以归约 (vardef)


状态 11

   19 vardecl: TOK_INT vardef . vardecl_ TOK_SEMICOLON
   23 vardef: vardef . TOK_LSQUARE INTCONST TOK_RSQUARE
   24       | vardef . TOK_ASSIGN initval

    TOK_ASSIGN   偏移，并进入状态 18
    TOK_LSQUARE  偏移，并进入状态 19
    TOK_COMMA    偏移，并进入状态 20

    $default  使用规则 21 以归约 (vardecl_)

    vardecl_  转到状态 21


状态 12

   32 funcdef: TOK_VOID IDENT . TOK_LPAR funcfparams TOK_RPAR block
   34        | TOK_VOID IDENT . TOK_LPAR TOK_RPAR block

    TOK_LPAR  偏移，并进入状态 22


状态 13

    8 constdecl: TOK_CONST TOK_INT . constdef constdecl_ TOK_SEMICOLON

    IDENT  偏移，并进入状态 23

    constdef  转到状态 24


状态 14

    0 $accept: program $end .

    $default  接受


状态 15

    2 compunit: decl compunit .

    $default  使用规则 2 以归约 (compunit)


状态 16

    3 compunit: funcdef compunit .

    $default  使用规则 3 以归约 (compunit)


状态 17

   31 funcdef: TOK_INT IDENT TOK_LPAR . funcfparams TOK_RPAR block
   33        | TOK_INT IDENT TOK_LPAR . TOK_RPAR block

    TOK_INT   偏移，并进入状态 25
    TOK_RPAR  偏移，并进入状态 26

    funcfparams  转到状态 27
    funcfparam   转到状态 28


状态 18

   24 vardef: vardef TOK_ASSIGN . initval

    TOK_ADD       偏移，并进入状态 29
    TOK_SUB       偏移，并进入状态 30
    TOK_NOT       偏移，并进入状态 31
    INTCONST      偏移，并进入状态 32
    IDENT         偏移，并进入状态 33
    TOK_LPAR      偏移，并进入状态 34
    TOK_LBRACKET  偏移，并进入状态 35

    $default  使用规则 28 以归约 (initval)

    initval     转到状态 36
    exp         转到状态 37
    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 19

   23 vardef: vardef TOK_LSQUARE . INTCONST TOK_RSQUARE

    INTCONST  偏移，并进入状态 45


状态 20

   20 vardecl_: TOK_COMMA . vardef vardecl_

    IDENT  偏移，并进入状态 46

    vardef  转到状态 47


状态 21

   19 vardecl: TOK_INT vardef vardecl_ . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 48


状态 22

   32 funcdef: TOK_VOID IDENT TOK_LPAR . funcfparams TOK_RPAR block
   34        | TOK_VOID IDENT TOK_LPAR . TOK_RPAR block

    TOK_INT   偏移，并进入状态 25
    TOK_RPAR  偏移，并进入状态 49

    funcfparams  转到状态 50
    funcfparam   转到状态 28


状态 23

   11 constdef: IDENT .

    $default  使用规则 11 以归约 (constdef)


状态 24

    8 constdecl: TOK_CONST TOK_INT constdef . constdecl_ TOK_SEMICOLON
   12 constdef: constdef . TOK_LSQUARE INTCONST TOK_RSQUARE
   13         | constdef . TOK_ASSIGN constinitval

    TOK_ASSIGN   偏移，并进入状态 51
    TOK_LSQUARE  偏移，并进入状态 52
    TOK_COMMA    偏移，并进入状态 53

    $default  使用规则 10 以归约 (constdecl_)

    constdecl_  转到状态 54


状态 25

   37 funcfparam: TOK_INT . IDENT TOK_LSQUARE TOK_RSQUARE funcfparam_
   38           | TOK_INT . IDENT

    IDENT  偏移，并进入状态 55


状态 26

   33 funcdef: TOK_INT IDENT TOK_LPAR TOK_RPAR . block

    TOK_LBRACKET  偏移，并进入状态 56

    block  转到状态 57


状态 27

   31 funcdef: TOK_INT IDENT TOK_LPAR funcfparams . TOK_RPAR block

    TOK_RPAR  偏移，并进入状态 58


状态 28

   35 funcfparams: funcfparam . TOK_COMMA funcfparams
   36            | funcfparam .

    TOK_COMMA  偏移，并进入状态 59

    $default  使用规则 36 以归约 (funcfparams)


状态 29

   70 unaryop: TOK_ADD .

    $default  使用规则 70 以归约 (unaryop)


状态 30

   71 unaryop: TOK_SUB .

    $default  使用规则 71 以归约 (unaryop)


状态 31

   72 unaryop: TOK_NOT .

    $default  使用规则 72 以归约 (unaryop)


状态 32

   65 number: INTCONST .

    $default  使用规则 65 以归约 (number)


状态 33

   59 lval: IDENT . lval_
   67 unaryexp: IDENT . TOK_LPAR funcrparams TOK_RPAR
   68         | IDENT . TOK_LPAR TOK_RPAR

    TOK_LPAR     偏移，并进入状态 60
    TOK_LSQUARE  偏移，并进入状态 61

    TOK_LSQUARE  [使用规则 61 以归约 (lval_)]
    $default     使用规则 61 以归约 (lval_)

    lval_  转到状态 62


状态 34

   62 primaryexp: TOK_LPAR . exp TOK_RPAR

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    exp         转到状态 63
    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 35

   26 initval: TOK_LBRACKET . exp initval_ TOK_RBRACKET initval
   27        | TOK_LBRACKET . TOK_RBRACKET

    TOK_ADD       偏移，并进入状态 29
    TOK_SUB       偏移，并进入状态 30
    TOK_NOT       偏移，并进入状态 31
    INTCONST      偏移，并进入状态 32
    IDENT         偏移，并进入状态 33
    TOK_LPAR      偏移，并进入状态 34
    TOK_RBRACKET  偏移，并进入状态 64

    exp         转到状态 65
    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 36

   24 vardef: vardef TOK_ASSIGN initval .

    $default  使用规则 24 以归约 (vardef)


状态 37

   25 initval: exp .

    $default  使用规则 25 以归约 (initval)


状态 38

   63 primaryexp: lval .

    $default  使用规则 63 以归约 (primaryexp)


状态 39

   66 unaryexp: primaryexp .

    $default  使用规则 66 以归约 (unaryexp)


状态 40

   64 primaryexp: number .

    $default  使用规则 64 以归约 (primaryexp)


状态 41

   75 mulexp: unaryexp .

    $default  使用规则 75 以归约 (mulexp)


状态 42

   69 unaryexp: unaryop . unaryexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 66
    unaryop     转到状态 42


状态 43

   76 mulexp: mulexp . TOK_MUL unaryexp
   77       | mulexp . TOK_DIV unaryexp
   78       | mulexp . TOK_MODULO unaryexp
   79 addexp: mulexp .

    TOK_MUL     偏移，并进入状态 67
    TOK_DIV     偏移，并进入状态 68
    TOK_MODULO  偏移，并进入状态 69

    $default  使用规则 79 以归约 (addexp)


状态 44

   57 exp: addexp .
   80 addexp: addexp . TOK_ADD addexp
   81       | addexp . TOK_SUB addexp

    TOK_ADD  偏移，并进入状态 70
    TOK_SUB  偏移，并进入状态 71

    $default  使用规则 57 以归约 (exp)


状态 45

   23 vardef: vardef TOK_LSQUARE INTCONST . TOK_RSQUARE

    TOK_RSQUARE  偏移，并进入状态 72


状态 46

   22 vardef: IDENT .

    $default  使用规则 22 以归约 (vardef)


状态 47

   20 vardecl_: TOK_COMMA vardef . vardecl_
   23 vardef: vardef . TOK_LSQUARE INTCONST TOK_RSQUARE
   24       | vardef . TOK_ASSIGN initval

    TOK_ASSIGN   偏移，并进入状态 18
    TOK_LSQUARE  偏移，并进入状态 19
    TOK_COMMA    偏移，并进入状态 20

    $default  使用规则 21 以归约 (vardecl_)

    vardecl_  转到状态 73


状态 48

   19 vardecl: TOK_INT vardef vardecl_ TOK_SEMICOLON .

    $default  使用规则 19 以归约 (vardecl)


状态 49

   34 funcdef: TOK_VOID IDENT TOK_LPAR TOK_RPAR . block

    TOK_LBRACKET  偏移，并进入状态 56

    block  转到状态 74


状态 50

   32 funcdef: TOK_VOID IDENT TOK_LPAR funcfparams . TOK_RPAR block

    TOK_RPAR  偏移，并进入状态 75


状态 51

   13 constdef: constdef TOK_ASSIGN . constinitval

    TOK_ADD       偏移，并进入状态 29
    TOK_SUB       偏移，并进入状态 30
    TOK_NOT       偏移，并进入状态 31
    INTCONST      偏移，并进入状态 32
    IDENT         偏移，并进入状态 33
    TOK_LPAR      偏移，并进入状态 34
    TOK_LBRACKET  偏移，并进入状态 76

    constinitval  转到状态 77
    lval          转到状态 38
    primaryexp    转到状态 39
    number        转到状态 40
    unaryexp      转到状态 41
    unaryop       转到状态 42
    mulexp        转到状态 43
    addexp        转到状态 78
    constexp      转到状态 79


状态 52

   12 constdef: constdef TOK_LSQUARE . INTCONST TOK_RSQUARE

    INTCONST  偏移，并进入状态 80


状态 53

    9 constdecl_: TOK_COMMA . constdef constdecl_

    IDENT  偏移，并进入状态 23

    constdef  转到状态 81


状态 54

    8 constdecl: TOK_CONST TOK_INT constdef constdecl_ . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 82


状态 55

   37 funcfparam: TOK_INT IDENT . TOK_LSQUARE TOK_RSQUARE funcfparam_
   38           | TOK_INT IDENT .

    TOK_LSQUARE  偏移，并进入状态 83

    $default  使用规则 38 以归约 (funcfparam)


状态 56

   41 block: TOK_LBRACKET . block_ TOK_RBRACKET

    TOK_ADD        偏移，并进入状态 29
    TOK_SUB        偏移，并进入状态 30
    TOK_NOT        偏移，并进入状态 31
    INTCONST       偏移，并进入状态 32
    IDENT          偏移，并进入状态 33
    TOK_INT        偏移，并进入状态 84
    TOK_CONST      偏移，并进入状态 3
    TOK_LPAR       偏移，并进入状态 34
    TOK_LBRACKET   偏移，并进入状态 56
    TOK_SEMICOLON  偏移，并进入状态 85
    TOK_BREAK      偏移，并进入状态 86
    TOK_CONTINUE   偏移，并进入状态 87
    TOK_IF         偏移，并进入状态 88
    TOK_WHILE      偏移，并进入状态 89
    TOK_RETURN     偏移，并进入状态 90

    $default  使用规则 43 以归约 (block_)

    decl        转到状态 91
    constdecl   转到状态 7
    vardecl     转到状态 8
    block       转到状态 92
    block_      转到状态 93
    blockitem   转到状态 94
    stmt        转到状态 95
    exp         转到状态 96
    lval        转到状态 97
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 57

   33 funcdef: TOK_INT IDENT TOK_LPAR TOK_RPAR block .

    $default  使用规则 33 以归约 (funcdef)


状态 58

   31 funcdef: TOK_INT IDENT TOK_LPAR funcfparams TOK_RPAR . block

    TOK_LBRACKET  偏移，并进入状态 56

    block  转到状态 98


状态 59

   35 funcfparams: funcfparam TOK_COMMA . funcfparams

    TOK_INT  偏移，并进入状态 25

    funcfparams  转到状态 99
    funcfparam   转到状态 28


状态 60

   67 unaryexp: IDENT TOK_LPAR . funcrparams TOK_RPAR
   68         | IDENT TOK_LPAR . TOK_RPAR

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34
    TOK_RPAR  偏移，并进入状态 100

    exp          转到状态 101
    lval         转到状态 38
    primaryexp   转到状态 39
    number       转到状态 40
    unaryexp     转到状态 41
    unaryop      转到状态 42
    funcrparams  转到状态 102
    mulexp       转到状态 43
    addexp       转到状态 44


状态 61

   60 lval_: TOK_LSQUARE . exp TOK_RSQUARE lval_

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    exp         转到状态 103
    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 62

   59 lval: IDENT lval_ .

    $default  使用规则 59 以归约 (lval)


状态 63

   62 primaryexp: TOK_LPAR exp . TOK_RPAR

    TOK_RPAR  偏移，并进入状态 104


状态 64

   27 initval: TOK_LBRACKET TOK_RBRACKET .

    $default  使用规则 27 以归约 (initval)


状态 65

   26 initval: TOK_LBRACKET exp . initval_ TOK_RBRACKET initval

    TOK_COMMA  偏移，并进入状态 105

    $default  使用规则 30 以归约 (initval_)

    initval_  转到状态 106


状态 66

   69 unaryexp: unaryop unaryexp .

    $default  使用规则 69 以归约 (unaryexp)


状态 67

   76 mulexp: mulexp TOK_MUL . unaryexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 107
    unaryop     转到状态 42


状态 68

   77 mulexp: mulexp TOK_DIV . unaryexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 108
    unaryop     转到状态 42


状态 69

   78 mulexp: mulexp TOK_MODULO . unaryexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 109
    unaryop     转到状态 42


状态 70

   80 addexp: addexp TOK_ADD . addexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 110


状态 71

   81 addexp: addexp TOK_SUB . addexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 111


状态 72

   23 vardef: vardef TOK_LSQUARE INTCONST TOK_RSQUARE .

    $default  使用规则 23 以归约 (vardef)


状态 73

   20 vardecl_: TOK_COMMA vardef vardecl_ .

    $default  使用规则 20 以归约 (vardecl_)


状态 74

   34 funcdef: TOK_VOID IDENT TOK_LPAR TOK_RPAR block .

    $default  使用规则 34 以归约 (funcdef)


状态 75

   32 funcdef: TOK_VOID IDENT TOK_LPAR funcfparams TOK_RPAR . block

    TOK_LBRACKET  偏移，并进入状态 56

    block  转到状态 112


状态 76

   15 constinitval: TOK_LBRACKET . TOK_RBRACKET
   16             | TOK_LBRACKET . constinitval constinitval_ TOK_RBRACKET

    TOK_ADD       偏移，并进入状态 29
    TOK_SUB       偏移，并进入状态 30
    TOK_NOT       偏移，并进入状态 31
    INTCONST      偏移，并进入状态 32
    IDENT         偏移，并进入状态 33
    TOK_LPAR      偏移，并进入状态 34
    TOK_LBRACKET  偏移，并进入状态 76
    TOK_RBRACKET  偏移，并进入状态 113

    constinitval  转到状态 114
    lval          转到状态 38
    primaryexp    转到状态 39
    number        转到状态 40
    unaryexp      转到状态 41
    unaryop       转到状态 42
    mulexp        转到状态 43
    addexp        转到状态 78
    constexp      转到状态 79


状态 77

   13 constdef: constdef TOK_ASSIGN constinitval .

    $default  使用规则 13 以归约 (constdef)


状态 78

   80 addexp: addexp . TOK_ADD addexp
   81       | addexp . TOK_SUB addexp
   94 constexp: addexp .

    TOK_ADD  偏移，并进入状态 70
    TOK_SUB  偏移，并进入状态 71

    $default  使用规则 94 以归约 (constexp)


状态 79

   14 constinitval: constexp .

    $default  使用规则 14 以归约 (constinitval)


状态 80

   12 constdef: constdef TOK_LSQUARE INTCONST . TOK_RSQUARE

    TOK_RSQUARE  偏移，并进入状态 115


状态 81

    9 constdecl_: TOK_COMMA constdef . constdecl_
   12 constdef: constdef . TOK_LSQUARE INTCONST TOK_RSQUARE
   13         | constdef . TOK_ASSIGN constinitval

    TOK_ASSIGN   偏移，并进入状态 51
    TOK_LSQUARE  偏移，并进入状态 52
    TOK_COMMA    偏移，并进入状态 53

    $default  使用规则 10 以归约 (constdecl_)

    constdecl_  转到状态 116


状态 82

    8 constdecl: TOK_CONST TOK_INT constdef constdecl_ TOK_SEMICOLON .

    $default  使用规则 8 以归约 (constdecl)


状态 83

   37 funcfparam: TOK_INT IDENT TOK_LSQUARE . TOK_RSQUARE funcfparam_

    TOK_RSQUARE  偏移，并进入状态 117


状态 84

   19 vardecl: TOK_INT . vardef vardecl_ TOK_SEMICOLON

    IDENT  偏移，并进入状态 46

    vardef  转到状态 11


状态 85

   47 stmt: TOK_SEMICOLON .

    $default  使用规则 47 以归约 (stmt)


状态 86

   53 stmt: TOK_BREAK . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 118


状态 87

   54 stmt: TOK_CONTINUE . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 119


状态 88

   50 stmt: TOK_IF . TOK_LPAR cond TOK_RPAR stmt
   51     | TOK_IF . TOK_LPAR cond TOK_RPAR stmt TOK_ELSE stmt

    TOK_LPAR  偏移，并进入状态 120


状态 89

   52 stmt: TOK_WHILE . TOK_LPAR cond TOK_RPAR stmt

    TOK_LPAR  偏移，并进入状态 121


状态 90

   55 stmt: TOK_RETURN . TOK_SEMICOLON
   56     | TOK_RETURN . exp TOK_SEMICOLON

    TOK_ADD        偏移，并进入状态 29
    TOK_SUB        偏移，并进入状态 30
    TOK_NOT        偏移，并进入状态 31
    INTCONST       偏移，并进入状态 32
    IDENT          偏移，并进入状态 33
    TOK_LPAR       偏移，并进入状态 34
    TOK_SEMICOLON  偏移，并进入状态 122

    exp         转到状态 123
    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 91

   44 blockitem: decl .

    $default  使用规则 44 以归约 (blockitem)


状态 92

   49 stmt: block .

    $default  使用规则 49 以归约 (stmt)


状态 93

   41 block: TOK_LBRACKET block_ . TOK_RBRACKET

    TOK_RBRACKET  偏移，并进入状态 124


状态 94

   42 block_: blockitem . block_

    TOK_ADD        偏移，并进入状态 29
    TOK_SUB        偏移，并进入状态 30
    TOK_NOT        偏移，并进入状态 31
    INTCONST       偏移，并进入状态 32
    IDENT          偏移，并进入状态 33
    TOK_INT        偏移，并进入状态 84
    TOK_CONST      偏移，并进入状态 3
    TOK_LPAR       偏移，并进入状态 34
    TOK_LBRACKET   偏移，并进入状态 56
    TOK_SEMICOLON  偏移，并进入状态 85
    TOK_BREAK      偏移，并进入状态 86
    TOK_CONTINUE   偏移，并进入状态 87
    TOK_IF         偏移，并进入状态 88
    TOK_WHILE      偏移，并进入状态 89
    TOK_RETURN     偏移，并进入状态 90

    $default  使用规则 43 以归约 (block_)

    decl        转到状态 91
    constdecl   转到状态 7
    vardecl     转到状态 8
    block       转到状态 92
    block_      转到状态 125
    blockitem   转到状态 94
    stmt        转到状态 95
    exp         转到状态 96
    lval        转到状态 97
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 95

   45 blockitem: stmt .

    $default  使用规则 45 以归约 (blockitem)


状态 96

   48 stmt: exp . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 126


状态 97

   46 stmt: lval . TOK_ASSIGN exp TOK_SEMICOLON
   63 primaryexp: lval .

    TOK_ASSIGN  偏移，并进入状态 127

    $default  使用规则 63 以归约 (primaryexp)


状态 98

   31 funcdef: TOK_INT IDENT TOK_LPAR funcfparams TOK_RPAR block .

    $default  使用规则 31 以归约 (funcdef)


状态 99

   35 funcfparams: funcfparam TOK_COMMA funcfparams .

    $default  使用规则 35 以归约 (funcfparams)


状态 100

   68 unaryexp: IDENT TOK_LPAR TOK_RPAR .

    $default  使用规则 68 以归约 (unaryexp)


状态 101

   73 funcrparams: exp . TOK_COMMA funcrparams
   74            | exp .

    TOK_COMMA  偏移，并进入状态 128

    $default  使用规则 74 以归约 (funcrparams)


状态 102

   67 unaryexp: IDENT TOK_LPAR funcrparams . TOK_RPAR

    TOK_RPAR  偏移，并进入状态 129


状态 103

   60 lval_: TOK_LSQUARE exp . TOK_RSQUARE lval_

    TOK_RSQUARE  偏移，并进入状态 130


状态 104

   62 primaryexp: TOK_LPAR exp TOK_RPAR .

    $default  使用规则 62 以归约 (primaryexp)


状态 105

   29 initval_: TOK_COMMA . exp initval_

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    exp         转到状态 131
    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 106

   26 initval: TOK_LBRACKET exp initval_ . TOK_RBRACKET initval

    TOK_RBRACKET  偏移，并进入状态 132


状态 107

   76 mulexp: mulexp TOK_MUL unaryexp .

    $default  使用规则 76 以归约 (mulexp)


状态 108

   77 mulexp: mulexp TOK_DIV unaryexp .

    $default  使用规则 77 以归约 (mulexp)


状态 109

   78 mulexp: mulexp TOK_MODULO unaryexp .

    $default  使用规则 78 以归约 (mulexp)


状态 110

   80 addexp: addexp . TOK_ADD addexp
   80       | addexp TOK_ADD addexp .
   81       | addexp . TOK_SUB addexp

    $default  使用规则 80 以归约 (addexp)


状态 111

   80 addexp: addexp . TOK_ADD addexp
   81       | addexp . TOK_SUB addexp
   81       | addexp TOK_SUB addexp .

    $default  使用规则 81 以归约 (addexp)


状态 112

   32 funcdef: TOK_VOID IDENT TOK_LPAR funcfparams TOK_RPAR block .

    $default  使用规则 32 以归约 (funcdef)


状态 113

   15 constinitval: TOK_LBRACKET TOK_RBRACKET .

    $default  使用规则 15 以归约 (constinitval)


状态 114

   16 constinitval: TOK_LBRACKET constinitval . constinitval_ TOK_RBRACKET

    TOK_COMMA  偏移，并进入状态 133

    $default  使用规则 18 以归约 (constinitval_)

    constinitval_  转到状态 134


状态 115

   12 constdef: constdef TOK_LSQUARE INTCONST TOK_RSQUARE .

    $default  使用规则 12 以归约 (constdef)


状态 116

    9 constdecl_: TOK_COMMA constdef constdecl_ .

    $default  使用规则 9 以归约 (constdecl_)


状态 117

   37 funcfparam: TOK_INT IDENT TOK_LSQUARE TOK_RSQUARE . funcfparam_

    TOK_LSQUARE  偏移，并进入状态 135

    $default  使用规则 40 以归约 (funcfparam_)

    funcfparam_  转到状态 136


状态 118

   53 stmt: TOK_BREAK TOK_SEMICOLON .

    $default  使用规则 53 以归约 (stmt)


状态 119

   54 stmt: TOK_CONTINUE TOK_SEMICOLON .

    $default  使用规则 54 以归约 (stmt)


状态 120

   50 stmt: TOK_IF TOK_LPAR . cond TOK_RPAR stmt
   51     | TOK_IF TOK_LPAR . cond TOK_RPAR stmt TOK_ELSE stmt

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    cond        转到状态 137
    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 138
    relexp      转到状态 139
    eqexp       转到状态 140
    landexp     转到状态 141
    lorexp      转到状态 142


状态 121

   52 stmt: TOK_WHILE TOK_LPAR . cond TOK_RPAR stmt

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    cond        转到状态 143
    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 138
    relexp      转到状态 139
    eqexp       转到状态 140
    landexp     转到状态 141
    lorexp      转到状态 142


状态 122

   55 stmt: TOK_RETURN TOK_SEMICOLON .

    $default  使用规则 55 以归约 (stmt)


状态 123

   56 stmt: TOK_RETURN exp . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 144


状态 124

   41 block: TOK_LBRACKET block_ TOK_RBRACKET .

    $default  使用规则 41 以归约 (block)


状态 125

   42 block_: blockitem block_ .

    $default  使用规则 42 以归约 (block_)


状态 126

   48 stmt: exp TOK_SEMICOLON .

    $default  使用规则 48 以归约 (stmt)


状态 127

   46 stmt: lval TOK_ASSIGN . exp TOK_SEMICOLON

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    exp         转到状态 145
    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 128

   73 funcrparams: exp TOK_COMMA . funcrparams

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    exp          转到状态 101
    lval         转到状态 38
    primaryexp   转到状态 39
    number       转到状态 40
    unaryexp     转到状态 41
    unaryop      转到状态 42
    funcrparams  转到状态 146
    mulexp       转到状态 43
    addexp       转到状态 44


状态 129

   67 unaryexp: IDENT TOK_LPAR funcrparams TOK_RPAR .

    $default  使用规则 67 以归约 (unaryexp)


状态 130

   60 lval_: TOK_LSQUARE exp TOK_RSQUARE . lval_

    TOK_LSQUARE  偏移，并进入状态 61

    TOK_LSQUARE  [使用规则 61 以归约 (lval_)]
    $default     使用规则 61 以归约 (lval_)

    lval_  转到状态 147


状态 131

   29 initval_: TOK_COMMA exp . initval_

    TOK_COMMA  偏移，并进入状态 105

    $default  使用规则 30 以归约 (initval_)

    initval_  转到状态 148


状态 132

   26 initval: TOK_LBRACKET exp initval_ TOK_RBRACKET . initval

    TOK_ADD       偏移，并进入状态 29
    TOK_SUB       偏移，并进入状态 30
    TOK_NOT       偏移，并进入状态 31
    INTCONST      偏移，并进入状态 32
    IDENT         偏移，并进入状态 33
    TOK_LPAR      偏移，并进入状态 34
    TOK_LBRACKET  偏移，并进入状态 35

    $default  使用规则 28 以归约 (initval)

    initval     转到状态 149
    exp         转到状态 37
    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 133

   17 constinitval_: TOK_COMMA . constinitval constinitval_

    TOK_ADD       偏移，并进入状态 29
    TOK_SUB       偏移，并进入状态 30
    TOK_NOT       偏移，并进入状态 31
    INTCONST      偏移，并进入状态 32
    IDENT         偏移，并进入状态 33
    TOK_LPAR      偏移，并进入状态 34
    TOK_LBRACKET  偏移，并进入状态 76

    constinitval  转到状态 150
    lval          转到状态 38
    primaryexp    转到状态 39
    number        转到状态 40
    unaryexp      转到状态 41
    unaryop       转到状态 42
    mulexp        转到状态 43
    addexp        转到状态 78
    constexp      转到状态 79


状态 134

   16 constinitval: TOK_LBRACKET constinitval constinitval_ . TOK_RBRACKET

    TOK_RBRACKET  偏移，并进入状态 151


状态 135

   39 funcfparam_: TOK_LSQUARE . INTCONST TOK_RSQUARE funcfparam_

    INTCONST  偏移，并进入状态 152


状态 136

   37 funcfparam: TOK_INT IDENT TOK_LSQUARE TOK_RSQUARE funcfparam_ .

    $default  使用规则 37 以归约 (funcfparam)


状态 137

   50 stmt: TOK_IF TOK_LPAR cond . TOK_RPAR stmt
   51     | TOK_IF TOK_LPAR cond . TOK_RPAR stmt TOK_ELSE stmt

    TOK_RPAR  偏移，并进入状态 153


状态 138

   80 addexp: addexp . TOK_ADD addexp
   81       | addexp . TOK_SUB addexp
   82 relexp: addexp .

    TOK_ADD  偏移，并进入状态 70
    TOK_SUB  偏移，并进入状态 71

    $default  使用规则 82 以归约 (relexp)


状态 139

   83 relexp: relexp . TOK_LESS addexp
   84       | relexp . TOK_GREAT addexp
   85       | relexp . TOK_LESSEQ addexp
   86       | relexp . TOK_GREATEQ addexp
   87 eqexp: relexp .

    TOK_LESS     偏移，并进入状态 154
    TOK_LESSEQ   偏移，并进入状态 155
    TOK_GREAT    偏移，并进入状态 156
    TOK_GREATEQ  偏移，并进入状态 157

    $default  使用规则 87 以归约 (eqexp)


状态 140

   88 eqexp: eqexp . TOK_EQ relexp
   89      | eqexp . TOK_NOTEQ relexp
   90 landexp: eqexp .

    TOK_NOTEQ  偏移，并进入状态 158
    TOK_EQ     偏移，并进入状态 159

    $default  使用规则 90 以归约 (landexp)


状态 141

   91 landexp: landexp . TOK_AND eqexp
   92 lorexp: landexp .

    TOK_AND  偏移，并进入状态 160

    $default  使用规则 92 以归约 (lorexp)


状态 142

   58 cond: lorexp .
   93 lorexp: lorexp . TOK_OR landexp

    TOK_OR  偏移，并进入状态 161

    $default  使用规则 58 以归约 (cond)


状态 143

   52 stmt: TOK_WHILE TOK_LPAR cond . TOK_RPAR stmt

    TOK_RPAR  偏移，并进入状态 162


状态 144

   56 stmt: TOK_RETURN exp TOK_SEMICOLON .

    $default  使用规则 56 以归约 (stmt)


状态 145

   46 stmt: lval TOK_ASSIGN exp . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 163


状态 146

   73 funcrparams: exp TOK_COMMA funcrparams .

    $default  使用规则 73 以归约 (funcrparams)


状态 147

   60 lval_: TOK_LSQUARE exp TOK_RSQUARE lval_ .

    $default  使用规则 60 以归约 (lval_)


状态 148

   29 initval_: TOK_COMMA exp initval_ .

    $default  使用规则 29 以归约 (initval_)


状态 149

   26 initval: TOK_LBRACKET exp initval_ TOK_RBRACKET initval .

    $default  使用规则 26 以归约 (initval)


状态 150

   17 constinitval_: TOK_COMMA constinitval . constinitval_

    TOK_COMMA  偏移，并进入状态 133

    $default  使用规则 18 以归约 (constinitval_)

    constinitval_  转到状态 164


状态 151

   16 constinitval: TOK_LBRACKET constinitval constinitval_ TOK_RBRACKET .

    $default  使用规则 16 以归约 (constinitval)


状态 152

   39 funcfparam_: TOK_LSQUARE INTCONST . TOK_RSQUARE funcfparam_

    TOK_RSQUARE  偏移，并进入状态 165


状态 153

   50 stmt: TOK_IF TOK_LPAR cond TOK_RPAR . stmt
   51     | TOK_IF TOK_LPAR cond TOK_RPAR . stmt TOK_ELSE stmt

    TOK_ADD        偏移，并进入状态 29
    TOK_SUB        偏移，并进入状态 30
    TOK_NOT        偏移，并进入状态 31
    INTCONST       偏移，并进入状态 32
    IDENT          偏移，并进入状态 33
    TOK_LPAR       偏移，并进入状态 34
    TOK_LBRACKET   偏移，并进入状态 56
    TOK_SEMICOLON  偏移，并进入状态 85
    TOK_BREAK      偏移，并进入状态 86
    TOK_CONTINUE   偏移，并进入状态 87
    TOK_IF         偏移，并进入状态 88
    TOK_WHILE      偏移，并进入状态 89
    TOK_RETURN     偏移，并进入状态 90

    block       转到状态 92
    stmt        转到状态 166
    exp         转到状态 96
    lval        转到状态 97
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 154

   83 relexp: relexp TOK_LESS . addexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 167


状态 155

   85 relexp: relexp TOK_LESSEQ . addexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 168


状态 156

   84 relexp: relexp TOK_GREAT . addexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 169


状态 157

   86 relexp: relexp TOK_GREATEQ . addexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 170


状态 158

   89 eqexp: eqexp TOK_NOTEQ . relexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 138
    relexp      转到状态 171


状态 159

   88 eqexp: eqexp TOK_EQ . relexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 138
    relexp      转到状态 172


状态 160

   91 landexp: landexp TOK_AND . eqexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 138
    relexp      转到状态 139
    eqexp       转到状态 173


状态 161

   93 lorexp: lorexp TOK_OR . landexp

    TOK_ADD   偏移，并进入状态 29
    TOK_SUB   偏移，并进入状态 30
    TOK_NOT   偏移，并进入状态 31
    INTCONST  偏移，并进入状态 32
    IDENT     偏移，并进入状态 33
    TOK_LPAR  偏移，并进入状态 34

    lval        转到状态 38
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 138
    relexp      转到状态 139
    eqexp       转到状态 140
    landexp     转到状态 174


状态 162

   52 stmt: TOK_WHILE TOK_LPAR cond TOK_RPAR . stmt

    TOK_ADD        偏移，并进入状态 29
    TOK_SUB        偏移，并进入状态 30
    TOK_NOT        偏移，并进入状态 31
    INTCONST       偏移，并进入状态 32
    IDENT          偏移，并进入状态 33
    TOK_LPAR       偏移，并进入状态 34
    TOK_LBRACKET   偏移，并进入状态 56
    TOK_SEMICOLON  偏移，并进入状态 85
    TOK_BREAK      偏移，并进入状态 86
    TOK_CONTINUE   偏移，并进入状态 87
    TOK_IF         偏移，并进入状态 88
    TOK_WHILE      偏移，并进入状态 89
    TOK_RETURN     偏移，并进入状态 90

    block       转到状态 92
    stmt        转到状态 175
    exp         转到状态 96
    lval        转到状态 97
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 163

   46 stmt: lval TOK_ASSIGN exp TOK_SEMICOLON .

    $default  使用规则 46 以归约 (stmt)


状态 164

   17 constinitval_: TOK_COMMA constinitval constinitval_ .

    $default  使用规则 17 以归约 (constinitval_)


状态 165

   39 funcfparam_: TOK_LSQUARE INTCONST TOK_RSQUARE . funcfparam_

    TOK_LSQUARE  偏移，并进入状态 135

    $default  使用规则 40 以归约 (funcfparam_)

    funcfparam_  转到状态 176


状态 166

   50 stmt: TOK_IF TOK_LPAR cond TOK_RPAR stmt .
   51     | TOK_IF TOK_LPAR cond TOK_RPAR stmt . TOK_ELSE stmt

    TOK_ELSE  偏移，并进入状态 177

    TOK_ELSE  [使用规则 50 以归约 (stmt)]
    $default  使用规则 50 以归约 (stmt)


状态 167

   80 addexp: addexp . TOK_ADD addexp
   81       | addexp . TOK_SUB addexp
   83 relexp: relexp TOK_LESS addexp .

    TOK_ADD  偏移，并进入状态 70
    TOK_SUB  偏移，并进入状态 71

    $default  使用规则 83 以归约 (relexp)


状态 168

   80 addexp: addexp . TOK_ADD addexp
   81       | addexp . TOK_SUB addexp
   85 relexp: relexp TOK_LESSEQ addexp .

    TOK_ADD  偏移，并进入状态 70
    TOK_SUB  偏移，并进入状态 71

    $default  使用规则 85 以归约 (relexp)


状态 169

   80 addexp: addexp . TOK_ADD addexp
   81       | addexp . TOK_SUB addexp
   84 relexp: relexp TOK_GREAT addexp .

    TOK_ADD  偏移，并进入状态 70
    TOK_SUB  偏移，并进入状态 71

    $default  使用规则 84 以归约 (relexp)


状态 170

   80 addexp: addexp . TOK_ADD addexp
   81       | addexp . TOK_SUB addexp
   86 relexp: relexp TOK_GREATEQ addexp .

    TOK_ADD  偏移，并进入状态 70
    TOK_SUB  偏移，并进入状态 71

    $default  使用规则 86 以归约 (relexp)


状态 171

   83 relexp: relexp . TOK_LESS addexp
   84       | relexp . TOK_GREAT addexp
   85       | relexp . TOK_LESSEQ addexp
   86       | relexp . TOK_GREATEQ addexp
   89 eqexp: eqexp TOK_NOTEQ relexp .

    TOK_LESS     偏移，并进入状态 154
    TOK_LESSEQ   偏移，并进入状态 155
    TOK_GREAT    偏移，并进入状态 156
    TOK_GREATEQ  偏移，并进入状态 157

    $default  使用规则 89 以归约 (eqexp)


状态 172

   83 relexp: relexp . TOK_LESS addexp
   84       | relexp . TOK_GREAT addexp
   85       | relexp . TOK_LESSEQ addexp
   86       | relexp . TOK_GREATEQ addexp
   88 eqexp: eqexp TOK_EQ relexp .

    TOK_LESS     偏移，并进入状态 154
    TOK_LESSEQ   偏移，并进入状态 155
    TOK_GREAT    偏移，并进入状态 156
    TOK_GREATEQ  偏移，并进入状态 157

    $default  使用规则 88 以归约 (eqexp)


状态 173

   88 eqexp: eqexp . TOK_EQ relexp
   89      | eqexp . TOK_NOTEQ relexp
   91 landexp: landexp TOK_AND eqexp .

    TOK_NOTEQ  偏移，并进入状态 158
    TOK_EQ     偏移，并进入状态 159

    $default  使用规则 91 以归约 (landexp)


状态 174

   91 landexp: landexp . TOK_AND eqexp
   93 lorexp: lorexp TOK_OR landexp .

    TOK_AND  偏移，并进入状态 160

    $default  使用规则 93 以归约 (lorexp)


状态 175

   52 stmt: TOK_WHILE TOK_LPAR cond TOK_RPAR stmt .

    $default  使用规则 52 以归约 (stmt)


状态 176

   39 funcfparam_: TOK_LSQUARE INTCONST TOK_RSQUARE funcfparam_ .

    $default  使用规则 39 以归约 (funcfparam_)


状态 177

   51 stmt: TOK_IF TOK_LPAR cond TOK_RPAR stmt TOK_ELSE . stmt

    TOK_ADD        偏移，并进入状态 29
    TOK_SUB        偏移，并进入状态 30
    TOK_NOT        偏移，并进入状态 31
    INTCONST       偏移，并进入状态 32
    IDENT          偏移，并进入状态 33
    TOK_LPAR       偏移，并进入状态 34
    TOK_LBRACKET   偏移，并进入状态 56
    TOK_SEMICOLON  偏移，并进入状态 85
    TOK_BREAK      偏移，并进入状态 86
    TOK_CONTINUE   偏移，并进入状态 87
    TOK_IF         偏移，并进入状态 88
    TOK_WHILE      偏移，并进入状态 89
    TOK_RETURN     偏移，并进入状态 90

    block       转到状态 92
    stmt        转到状态 178
    exp         转到状态 96
    lval        转到状态 97
    primaryexp  转到状态 39
    number      转到状态 40
    unaryexp    转到状态 41
    unaryop     转到状态 42
    mulexp      转到状态 43
    addexp      转到状态 44


状态 178

   51 stmt: TOK_IF TOK_LPAR cond TOK_RPAR stmt TOK_ELSE stmt .

    $default  使用规则 51 以归约 (stmt)
