状态 169 冲突：1 项偏移/归约


语法

    0 $accept: program $end

    1 program: compunit

    2 compunit: decl compunit
    3         | funcdef compunit
    4         | decl
    5         | funcdef

    6 decl: constdecl
    7     | vardecl

    8 constdecl: TOK_CONST TOK_INT constdef constdecl_ TOK_SEMICOLON

    9 constdecl_: TOK_COMMA constdef constdecl_
   10           | %empty

   11 constdef: IDENT constdef_ TOK_ASSIGN constinitval

   12 constdef_: TOK_LSQUARE INTCONST TOK_RSQUARE constdef_
   13          | %empty

   14 constinitval: constexp
   15             | TOK_LBRACKET TOK_RBRACKET
   16             | TOK_LBRACKET constinitval constinitval_ TOK_RBRACKET

   17 constinitval_: TOK_COMMA constinitval constinitval_
   18              | %empty

   19 vardecl: TOK_INT vardef vardecl_ TOK_SEMICOLON

   20 vardecl_: TOK_COMMA vardef vardecl_
   21         | %empty

   22 vardef: IDENT vardef_
   23       | IDENT vardef_ TOK_ASSIGN initval

   24 vardef_: TOK_LSQUARE INTCONST TOK_RSQUARE vardef_
   25        | %empty

   26 initval: exp
   27        | TOK_LBRACKET exp initval_ TOK_RBRACKET initval
   28        | TOK_LBRACKET TOK_RBRACKET
   29        | %empty

   30 initval_: TOK_COMMA exp initval_
   31         | %empty

   32 funcdef: TOK_INT IDENT TOK_LPAR funcfparams TOK_RPAR block
   33        | TOK_VOID IDENT TOK_LPAR funcfparams TOK_RPAR block
   34        | TOK_INT IDENT TOK_LPAR TOK_RPAR block
   35        | TOK_VOID IDENT TOK_LPAR TOK_RPAR block

   36 funcfparams: funcfparam TOK_COMMA funcfparams
   37            | funcfparam

   38 funcfparam: TOK_INT IDENT TOK_LSQUARE TOK_RSQUARE funcfparam_
   39           | TOK_INT IDENT

   40 funcfparam_: TOK_LSQUARE INTCONST TOK_RSQUARE funcfparam_
   41            | %empty

   42 block: TOK_LBRACKET block_ TOK_RBRACKET

   43 block_: blockitem block_
   44       | %empty

   45 blockitem: decl
   46          | stmt

   47 stmt: lval TOK_ASSIGN exp TOK_SEMICOLON
   48     | TOK_SEMICOLON
   49     | exp TOK_SEMICOLON
   50     | block
   51     | TOK_IF TOK_LPAR cond TOK_RPAR stmt
   52     | TOK_IF TOK_LPAR cond TOK_RPAR stmt TOK_ELSE stmt
   53     | TOK_WHILE TOK_LPAR cond TOK_RPAR stmt
   54     | TOK_BREAK TOK_SEMICOLON
   55     | TOK_CONTINUE TOK_SEMICOLON
   56     | TOK_RETURN TOK_SEMICOLON
   57     | TOK_RETURN exp TOK_SEMICOLON

   58 exp: addexp

   59 cond: lorexp

   60 lval: IDENT lval_

   61 lval_: TOK_LSQUARE exp TOK_RSQUARE lval_
   62      | %empty

   63 primaryexp: TOK_LPAR exp TOK_RPAR
   64           | lval
   65           | number

   66 number: INTCONST

   67 unaryexp: primaryexp
   68         | IDENT TOK_LPAR funcrparams TOK_RPAR
   69         | IDENT TOK_LPAR TOK_RPAR
   70         | unaryop unaryexp

   71 unaryop: TOK_ADD
   72        | TOK_SUB
   73        | TOK_NOT

   74 funcrparams: exp TOK_COMMA funcrparams
   75            | exp

   76 mulexp: unaryexp
   77       | mulexp TOK_MUL unaryexp
   78       | mulexp TOK_DIV unaryexp
   79       | mulexp TOK_MODULO unaryexp

   80 addexp: mulexp
   81       | addexp TOK_ADD addexp
   82       | addexp TOK_SUB addexp

   83 relexp: addexp
   84       | relexp TOK_LESS addexp
   85       | relexp TOK_GREAT addexp
   86       | relexp TOK_LESSEQ addexp
   87       | relexp TOK_GREATEQ addexp

   88 eqexp: relexp
   89      | eqexp TOK_EQ relexp
   90      | eqexp TOK_NOTEQ relexp

   91 landexp: eqexp
   92        | landexp TOK_AND eqexp

   93 lorexp: landexp
   94       | lorexp TOK_OR landexp

   95 constexp: addexp


终结语词，附有它们出现处的规则

    $end (0) 0
    error (256)
    TOK_OR (258) 94
    TOK_AND (259) 92
    TOK_ADD (260) 71 81
    TOK_SUB (261) 72 82
    TOK_MUL (262) 77
    TOK_DIV (263) 78
    TOK_MODULO (264) 79
    TOK_LESS <type_id> (265) 84
    TOK_LESSEQ <type_id> (266) 86
    TOK_GREAT <type_id> (267) 85
    TOK_GREATEQ <type_id> (268) 87
    TOK_NOTEQ <type_id> (269) 90
    TOK_EQ <type_id> (270) 89
    TOK_ASSIGN (271) 11 23 47
    TOK_NOT (272) 73
    INTCONST <type_int> (273) 12 24 40 66
    IDENT <type_id> (274) 11 22 23 32 33 34 35 38 39 60 68 69
    TOK_INT <type_id> (275) 8 19 32 34 38 39
    TOK_VOID <type_id> (276) 33 35
    TOK_CONST <type_id> (277) 8
    TOK_LPAR (278) 32 33 34 35 51 52 53 63 68 69
    TOK_RPAR (279) 32 33 34 35 51 52 53 63 68 69
    TOK_LBRACKET (280) 15 16 27 28 42
    TOK_RBRACKET (281) 15 16 27 28 42
    TOK_LSQUARE (282) 12 24 38 40 61
    TOK_RSQUARE (283) 12 24 38 40 61
    TOK_COMMA (284) 9 17 20 30 36 74
    TOK_SEMICOLON (285) 8 19 47 48 49 54 55 56 57
    TOK_BREAK (286) 54
    TOK_CONTINUE (287) 55
    TOK_IF (288) 51 52
    TOK_ELSE (289) 52
    TOK_WHILE (290) 53
    TOK_RETURN (291) 56 57


非终结语词，附有它们出现处的规则

    $accept (37)
        on left: 0
    program <ptr> (38)
        on left: 1
        on right: 0
    compunit <ptr> (39)
        on left: 2 3 4 5
        on right: 1 2 3
    decl <ptr> (40)
        on left: 6 7
        on right: 2 4 45
    constdecl <ptr> (41)
        on left: 8
        on right: 6
    constdecl_ <ptr> (42)
        on left: 9 10
        on right: 8 9
    constdef <ptr> (43)
        on left: 11
        on right: 8 9
    constdef_ <ptr> (44)
        on left: 12 13
        on right: 11 12
    constinitval <ptr> (45)
        on left: 14 15 16
        on right: 11 16 17
    constinitval_ <ptr> (46)
        on left: 17 18
        on right: 16 17
    vardecl <ptr> (47)
        on left: 19
        on right: 7
    vardecl_ <ptr> (48)
        on left: 20 21
        on right: 19 20
    vardef <ptr> (49)
        on left: 22 23
        on right: 19 20
    vardef_ <ptr> (50)
        on left: 24 25
        on right: 22 23 24
    initval <ptr> (51)
        on left: 26 27 28 29
        on right: 23 27
    initval_ <ptr> (52)
        on left: 30 31
        on right: 27 30
    funcdef <ptr> (53)
        on left: 32 33 34 35
        on right: 3 5
    funcfparams <ptr> (54)
        on left: 36 37
        on right: 32 33 36
    funcfparam <ptr> (55)
        on left: 38 39
        on right: 36 37
    funcfparam_ <ptr> (56)
        on left: 40 41
        on right: 38 40
    block <ptr> (57)
        on left: 42
        on right: 32 33 34 35 50
    block_ <ptr> (58)
        on left: 43 44
        on right: 42 43
    blockitem <ptr> (59)
        on left: 45 46
        on right: 43
    stmt <ptr> (60)
        on left: 47 48 49 50 51 52 53 54 55 56 57
        on right: 46 51 52 53
    exp <ptr> (61)
        on left: 58
        on right: 26 27 30 47 49 57 61 63 74 75
    cond <ptr> (62)
        on left: 59
        on right: 51 52 53
    lval <ptr> (63)
        on left: 60
        on right: 47 64
    lval_ <ptr> (64)
        on left: 61 62
        on right: 60 61
    primaryexp <ptr> (65)
        on left: 63 64 65
        on right: 67
    number <ptr> (66)
        on left: 66
        on right: 65
    unaryexp <ptr> (67)
        on left: 67 68 69 70
        on right: 70 76 77 78 79
    unaryop <ptr> (68)
        on left: 71 72 73
        on right: 70
    funcrparams <ptr> (69)
        on left: 74 75
        on right: 68 74
    mulexp <ptr> (70)
        on left: 76 77 78 79
        on right: 77 78 79 80
    addexp <ptr> (71)
        on left: 80 81 82
        on right: 58 81 82 83 84 85 86 87 95
    relexp <ptr> (72)
        on left: 83 84 85 86 87
        on right: 84 85 86 87 88 89 90
    eqexp <ptr> (73)
        on left: 88 89 90
        on right: 89 90 91 92
    landexp <ptr> (74)
        on left: 91 92
        on right: 92 93 94
    lorexp <ptr> (75)
        on left: 93 94
        on right: 59 94
    constexp <ptr> (76)
        on left: 95
        on right: 14


状态 0

    0 $accept: . program $end

    TOK_INT    偏移，并进入状态 1
    TOK_VOID   偏移，并进入状态 2
    TOK_CONST  偏移，并进入状态 3

    program    转到状态 4
    compunit   转到状态 5
    decl       转到状态 6
    constdecl  转到状态 7
    vardecl    转到状态 8
    funcdef    转到状态 9


状态 1

   19 vardecl: TOK_INT . vardef vardecl_ TOK_SEMICOLON
   32 funcdef: TOK_INT . IDENT TOK_LPAR funcfparams TOK_RPAR block
   34        | TOK_INT . IDENT TOK_LPAR TOK_RPAR block

    IDENT  偏移，并进入状态 10

    vardef  转到状态 11


状态 2

   33 funcdef: TOK_VOID . IDENT TOK_LPAR funcfparams TOK_RPAR block
   35        | TOK_VOID . IDENT TOK_LPAR TOK_RPAR block

    IDENT  偏移，并进入状态 12


状态 3

    8 constdecl: TOK_CONST . TOK_INT constdef constdecl_ TOK_SEMICOLON

    TOK_INT  偏移，并进入状态 13


状态 4

    0 $accept: program . $end

    $end  偏移，并进入状态 14


状态 5

    1 program: compunit .

    $default  使用规则 1 以归约 (program)


状态 6

    2 compunit: decl . compunit
    4         | decl .

    TOK_INT    偏移，并进入状态 1
    TOK_VOID   偏移，并进入状态 2
    TOK_CONST  偏移，并进入状态 3

    $default  使用规则 4 以归约 (compunit)

    compunit   转到状态 15
    decl       转到状态 6
    constdecl  转到状态 7
    vardecl    转到状态 8
    funcdef    转到状态 9


状态 7

    6 decl: constdecl .

    $default  使用规则 6 以归约 (decl)


状态 8

    7 decl: vardecl .

    $default  使用规则 7 以归约 (decl)


状态 9

    3 compunit: funcdef . compunit
    5         | funcdef .

    TOK_INT    偏移，并进入状态 1
    TOK_VOID   偏移，并进入状态 2
    TOK_CONST  偏移，并进入状态 3

    $default  使用规则 5 以归约 (compunit)

    compunit   转到状态 16
    decl       转到状态 6
    constdecl  转到状态 7
    vardecl    转到状态 8
    funcdef    转到状态 9


状态 10

   22 vardef: IDENT . vardef_
   23       | IDENT . vardef_ TOK_ASSIGN initval
   32 funcdef: TOK_INT IDENT . TOK_LPAR funcfparams TOK_RPAR block
   34        | TOK_INT IDENT . TOK_LPAR TOK_RPAR block

    TOK_LPAR     偏移，并进入状态 17
    TOK_LSQUARE  偏移，并进入状态 18

    $default  使用规则 25 以归约 (vardef_)

    vardef_  转到状态 19


状态 11

   19 vardecl: TOK_INT vardef . vardecl_ TOK_SEMICOLON

    TOK_COMMA  偏移，并进入状态 20

    $default  使用规则 21 以归约 (vardecl_)

    vardecl_  转到状态 21


状态 12

   33 funcdef: TOK_VOID IDENT . TOK_LPAR funcfparams TOK_RPAR block
   35        | TOK_VOID IDENT . TOK_LPAR TOK_RPAR block

    TOK_LPAR  偏移，并进入状态 22


状态 13

    8 constdecl: TOK_CONST TOK_INT . constdef constdecl_ TOK_SEMICOLON

    IDENT  偏移，并进入状态 23

    constdef  转到状态 24


状态 14

    0 $accept: program $end .

    $default  接受


状态 15

    2 compunit: decl compunit .

    $default  使用规则 2 以归约 (compunit)


状态 16

    3 compunit: funcdef compunit .

    $default  使用规则 3 以归约 (compunit)


状态 17

   32 funcdef: TOK_INT IDENT TOK_LPAR . funcfparams TOK_RPAR block
   34        | TOK_INT IDENT TOK_LPAR . TOK_RPAR block

    TOK_INT   偏移，并进入状态 25
    TOK_RPAR  偏移，并进入状态 26

    funcfparams  转到状态 27
    funcfparam   转到状态 28


状态 18

   24 vardef_: TOK_LSQUARE . INTCONST TOK_RSQUARE vardef_

    INTCONST  偏移，并进入状态 29


状态 19

   22 vardef: IDENT vardef_ .
   23       | IDENT vardef_ . TOK_ASSIGN initval

    TOK_ASSIGN  偏移，并进入状态 30

    $default  使用规则 22 以归约 (vardef)


状态 20

   20 vardecl_: TOK_COMMA . vardef vardecl_

    IDENT  偏移，并进入状态 31

    vardef  转到状态 32


状态 21

   19 vardecl: TOK_INT vardef vardecl_ . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 33


状态 22

   33 funcdef: TOK_VOID IDENT TOK_LPAR . funcfparams TOK_RPAR block
   35        | TOK_VOID IDENT TOK_LPAR . TOK_RPAR block

    TOK_INT   偏移，并进入状态 25
    TOK_RPAR  偏移，并进入状态 34

    funcfparams  转到状态 35
    funcfparam   转到状态 28


状态 23

   11 constdef: IDENT . constdef_ TOK_ASSIGN constinitval

    TOK_LSQUARE  偏移，并进入状态 36

    $default  使用规则 13 以归约 (constdef_)

    constdef_  转到状态 37


状态 24

    8 constdecl: TOK_CONST TOK_INT constdef . constdecl_ TOK_SEMICOLON

    TOK_COMMA  偏移，并进入状态 38

    $default  使用规则 10 以归约 (constdecl_)

    constdecl_  转到状态 39


状态 25

   38 funcfparam: TOK_INT . IDENT TOK_LSQUARE TOK_RSQUARE funcfparam_
   39           | TOK_INT . IDENT

    IDENT  偏移，并进入状态 40


状态 26

   34 funcdef: TOK_INT IDENT TOK_LPAR TOK_RPAR . block

    TOK_LBRACKET  偏移，并进入状态 41

    block  转到状态 42


状态 27

   32 funcdef: TOK_INT IDENT TOK_LPAR funcfparams . TOK_RPAR block

    TOK_RPAR  偏移，并进入状态 43


状态 28

   36 funcfparams: funcfparam . TOK_COMMA funcfparams
   37            | funcfparam .

    TOK_COMMA  偏移，并进入状态 44

    $default  使用规则 37 以归约 (funcfparams)


状态 29

   24 vardef_: TOK_LSQUARE INTCONST . TOK_RSQUARE vardef_

    TOK_RSQUARE  偏移，并进入状态 45


状态 30

   23 vardef: IDENT vardef_ TOK_ASSIGN . initval

    TOK_ADD       偏移，并进入状态 46
    TOK_SUB       偏移，并进入状态 47
    TOK_NOT       偏移，并进入状态 48
    INTCONST      偏移，并进入状态 49
    IDENT         偏移，并进入状态 50
    TOK_LPAR      偏移，并进入状态 51
    TOK_LBRACKET  偏移，并进入状态 52

    $default  使用规则 29 以归约 (initval)

    initval     转到状态 53
    exp         转到状态 54
    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 31

   22 vardef: IDENT . vardef_
   23       | IDENT . vardef_ TOK_ASSIGN initval

    TOK_LSQUARE  偏移，并进入状态 18

    $default  使用规则 25 以归约 (vardef_)

    vardef_  转到状态 19


状态 32

   20 vardecl_: TOK_COMMA vardef . vardecl_

    TOK_COMMA  偏移，并进入状态 20

    $default  使用规则 21 以归约 (vardecl_)

    vardecl_  转到状态 62


状态 33

   19 vardecl: TOK_INT vardef vardecl_ TOK_SEMICOLON .

    $default  使用规则 19 以归约 (vardecl)


状态 34

   35 funcdef: TOK_VOID IDENT TOK_LPAR TOK_RPAR . block

    TOK_LBRACKET  偏移，并进入状态 41

    block  转到状态 63


状态 35

   33 funcdef: TOK_VOID IDENT TOK_LPAR funcfparams . TOK_RPAR block

    TOK_RPAR  偏移，并进入状态 64


状态 36

   12 constdef_: TOK_LSQUARE . INTCONST TOK_RSQUARE constdef_

    INTCONST  偏移，并进入状态 65


状态 37

   11 constdef: IDENT constdef_ . TOK_ASSIGN constinitval

    TOK_ASSIGN  偏移，并进入状态 66


状态 38

    9 constdecl_: TOK_COMMA . constdef constdecl_

    IDENT  偏移，并进入状态 23

    constdef  转到状态 67


状态 39

    8 constdecl: TOK_CONST TOK_INT constdef constdecl_ . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 68


状态 40

   38 funcfparam: TOK_INT IDENT . TOK_LSQUARE TOK_RSQUARE funcfparam_
   39           | TOK_INT IDENT .

    TOK_LSQUARE  偏移，并进入状态 69

    $default  使用规则 39 以归约 (funcfparam)


状态 41

   42 block: TOK_LBRACKET . block_ TOK_RBRACKET

    TOK_ADD        偏移，并进入状态 46
    TOK_SUB        偏移，并进入状态 47
    TOK_NOT        偏移，并进入状态 48
    INTCONST       偏移，并进入状态 49
    IDENT          偏移，并进入状态 50
    TOK_INT        偏移，并进入状态 70
    TOK_CONST      偏移，并进入状态 3
    TOK_LPAR       偏移，并进入状态 51
    TOK_LBRACKET   偏移，并进入状态 41
    TOK_SEMICOLON  偏移，并进入状态 71
    TOK_BREAK      偏移，并进入状态 72
    TOK_CONTINUE   偏移，并进入状态 73
    TOK_IF         偏移，并进入状态 74
    TOK_WHILE      偏移，并进入状态 75
    TOK_RETURN     偏移，并进入状态 76

    $default  使用规则 44 以归约 (block_)

    decl        转到状态 77
    constdecl   转到状态 7
    vardecl     转到状态 8
    block       转到状态 78
    block_      转到状态 79
    blockitem   转到状态 80
    stmt        转到状态 81
    exp         转到状态 82
    lval        转到状态 83
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 42

   34 funcdef: TOK_INT IDENT TOK_LPAR TOK_RPAR block .

    $default  使用规则 34 以归约 (funcdef)


状态 43

   32 funcdef: TOK_INT IDENT TOK_LPAR funcfparams TOK_RPAR . block

    TOK_LBRACKET  偏移，并进入状态 41

    block  转到状态 84


状态 44

   36 funcfparams: funcfparam TOK_COMMA . funcfparams

    TOK_INT  偏移，并进入状态 25

    funcfparams  转到状态 85
    funcfparam   转到状态 28


状态 45

   24 vardef_: TOK_LSQUARE INTCONST TOK_RSQUARE . vardef_

    TOK_LSQUARE  偏移，并进入状态 18

    $default  使用规则 25 以归约 (vardef_)

    vardef_  转到状态 86


状态 46

   71 unaryop: TOK_ADD .

    $default  使用规则 71 以归约 (unaryop)


状态 47

   72 unaryop: TOK_SUB .

    $default  使用规则 72 以归约 (unaryop)


状态 48

   73 unaryop: TOK_NOT .

    $default  使用规则 73 以归约 (unaryop)


状态 49

   66 number: INTCONST .

    $default  使用规则 66 以归约 (number)


状态 50

   60 lval: IDENT . lval_
   68 unaryexp: IDENT . TOK_LPAR funcrparams TOK_RPAR
   69         | IDENT . TOK_LPAR TOK_RPAR

    TOK_LPAR     偏移，并进入状态 87
    TOK_LSQUARE  偏移，并进入状态 88

    $default  使用规则 62 以归约 (lval_)

    lval_  转到状态 89


状态 51

   63 primaryexp: TOK_LPAR . exp TOK_RPAR

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    exp         转到状态 90
    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 52

   27 initval: TOK_LBRACKET . exp initval_ TOK_RBRACKET initval
   28        | TOK_LBRACKET . TOK_RBRACKET

    TOK_ADD       偏移，并进入状态 46
    TOK_SUB       偏移，并进入状态 47
    TOK_NOT       偏移，并进入状态 48
    INTCONST      偏移，并进入状态 49
    IDENT         偏移，并进入状态 50
    TOK_LPAR      偏移，并进入状态 51
    TOK_RBRACKET  偏移，并进入状态 91

    exp         转到状态 92
    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 53

   23 vardef: IDENT vardef_ TOK_ASSIGN initval .

    $default  使用规则 23 以归约 (vardef)


状态 54

   26 initval: exp .

    $default  使用规则 26 以归约 (initval)


状态 55

   64 primaryexp: lval .

    $default  使用规则 64 以归约 (primaryexp)


状态 56

   67 unaryexp: primaryexp .

    $default  使用规则 67 以归约 (unaryexp)


状态 57

   65 primaryexp: number .

    $default  使用规则 65 以归约 (primaryexp)


状态 58

   76 mulexp: unaryexp .

    $default  使用规则 76 以归约 (mulexp)


状态 59

   70 unaryexp: unaryop . unaryexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 93
    unaryop     转到状态 59


状态 60

   77 mulexp: mulexp . TOK_MUL unaryexp
   78       | mulexp . TOK_DIV unaryexp
   79       | mulexp . TOK_MODULO unaryexp
   80 addexp: mulexp .

    TOK_MUL     偏移，并进入状态 94
    TOK_DIV     偏移，并进入状态 95
    TOK_MODULO  偏移，并进入状态 96

    $default  使用规则 80 以归约 (addexp)


状态 61

   58 exp: addexp .
   81 addexp: addexp . TOK_ADD addexp
   82       | addexp . TOK_SUB addexp

    TOK_ADD  偏移，并进入状态 97
    TOK_SUB  偏移，并进入状态 98

    $default  使用规则 58 以归约 (exp)


状态 62

   20 vardecl_: TOK_COMMA vardef vardecl_ .

    $default  使用规则 20 以归约 (vardecl_)


状态 63

   35 funcdef: TOK_VOID IDENT TOK_LPAR TOK_RPAR block .

    $default  使用规则 35 以归约 (funcdef)


状态 64

   33 funcdef: TOK_VOID IDENT TOK_LPAR funcfparams TOK_RPAR . block

    TOK_LBRACKET  偏移，并进入状态 41

    block  转到状态 99


状态 65

   12 constdef_: TOK_LSQUARE INTCONST . TOK_RSQUARE constdef_

    TOK_RSQUARE  偏移，并进入状态 100


状态 66

   11 constdef: IDENT constdef_ TOK_ASSIGN . constinitval

    TOK_ADD       偏移，并进入状态 46
    TOK_SUB       偏移，并进入状态 47
    TOK_NOT       偏移，并进入状态 48
    INTCONST      偏移，并进入状态 49
    IDENT         偏移，并进入状态 50
    TOK_LPAR      偏移，并进入状态 51
    TOK_LBRACKET  偏移，并进入状态 101

    constinitval  转到状态 102
    lval          转到状态 55
    primaryexp    转到状态 56
    number        转到状态 57
    unaryexp      转到状态 58
    unaryop       转到状态 59
    mulexp        转到状态 60
    addexp        转到状态 103
    constexp      转到状态 104


状态 67

    9 constdecl_: TOK_COMMA constdef . constdecl_

    TOK_COMMA  偏移，并进入状态 38

    $default  使用规则 10 以归约 (constdecl_)

    constdecl_  转到状态 105


状态 68

    8 constdecl: TOK_CONST TOK_INT constdef constdecl_ TOK_SEMICOLON .

    $default  使用规则 8 以归约 (constdecl)


状态 69

   38 funcfparam: TOK_INT IDENT TOK_LSQUARE . TOK_RSQUARE funcfparam_

    TOK_RSQUARE  偏移，并进入状态 106


状态 70

   19 vardecl: TOK_INT . vardef vardecl_ TOK_SEMICOLON

    IDENT  偏移，并进入状态 31

    vardef  转到状态 11


状态 71

   48 stmt: TOK_SEMICOLON .

    $default  使用规则 48 以归约 (stmt)


状态 72

   54 stmt: TOK_BREAK . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 107


状态 73

   55 stmt: TOK_CONTINUE . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 108


状态 74

   51 stmt: TOK_IF . TOK_LPAR cond TOK_RPAR stmt
   52     | TOK_IF . TOK_LPAR cond TOK_RPAR stmt TOK_ELSE stmt

    TOK_LPAR  偏移，并进入状态 109


状态 75

   53 stmt: TOK_WHILE . TOK_LPAR cond TOK_RPAR stmt

    TOK_LPAR  偏移，并进入状态 110


状态 76

   56 stmt: TOK_RETURN . TOK_SEMICOLON
   57     | TOK_RETURN . exp TOK_SEMICOLON

    TOK_ADD        偏移，并进入状态 46
    TOK_SUB        偏移，并进入状态 47
    TOK_NOT        偏移，并进入状态 48
    INTCONST       偏移，并进入状态 49
    IDENT          偏移，并进入状态 50
    TOK_LPAR       偏移，并进入状态 51
    TOK_SEMICOLON  偏移，并进入状态 111

    exp         转到状态 112
    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 77

   45 blockitem: decl .

    $default  使用规则 45 以归约 (blockitem)


状态 78

   50 stmt: block .

    $default  使用规则 50 以归约 (stmt)


状态 79

   42 block: TOK_LBRACKET block_ . TOK_RBRACKET

    TOK_RBRACKET  偏移，并进入状态 113


状态 80

   43 block_: blockitem . block_

    TOK_ADD        偏移，并进入状态 46
    TOK_SUB        偏移，并进入状态 47
    TOK_NOT        偏移，并进入状态 48
    INTCONST       偏移，并进入状态 49
    IDENT          偏移，并进入状态 50
    TOK_INT        偏移，并进入状态 70
    TOK_CONST      偏移，并进入状态 3
    TOK_LPAR       偏移，并进入状态 51
    TOK_LBRACKET   偏移，并进入状态 41
    TOK_SEMICOLON  偏移，并进入状态 71
    TOK_BREAK      偏移，并进入状态 72
    TOK_CONTINUE   偏移，并进入状态 73
    TOK_IF         偏移，并进入状态 74
    TOK_WHILE      偏移，并进入状态 75
    TOK_RETURN     偏移，并进入状态 76

    $default  使用规则 44 以归约 (block_)

    decl        转到状态 77
    constdecl   转到状态 7
    vardecl     转到状态 8
    block       转到状态 78
    block_      转到状态 114
    blockitem   转到状态 80
    stmt        转到状态 81
    exp         转到状态 82
    lval        转到状态 83
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 81

   46 blockitem: stmt .

    $default  使用规则 46 以归约 (blockitem)


状态 82

   49 stmt: exp . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 115


状态 83

   47 stmt: lval . TOK_ASSIGN exp TOK_SEMICOLON
   64 primaryexp: lval .

    TOK_ASSIGN  偏移，并进入状态 116

    $default  使用规则 64 以归约 (primaryexp)


状态 84

   32 funcdef: TOK_INT IDENT TOK_LPAR funcfparams TOK_RPAR block .

    $default  使用规则 32 以归约 (funcdef)


状态 85

   36 funcfparams: funcfparam TOK_COMMA funcfparams .

    $default  使用规则 36 以归约 (funcfparams)


状态 86

   24 vardef_: TOK_LSQUARE INTCONST TOK_RSQUARE vardef_ .

    $default  使用规则 24 以归约 (vardef_)


状态 87

   68 unaryexp: IDENT TOK_LPAR . funcrparams TOK_RPAR
   69         | IDENT TOK_LPAR . TOK_RPAR

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51
    TOK_RPAR  偏移，并进入状态 117

    exp          转到状态 118
    lval         转到状态 55
    primaryexp   转到状态 56
    number       转到状态 57
    unaryexp     转到状态 58
    unaryop      转到状态 59
    funcrparams  转到状态 119
    mulexp       转到状态 60
    addexp       转到状态 61


状态 88

   61 lval_: TOK_LSQUARE . exp TOK_RSQUARE lval_

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    exp         转到状态 120
    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 89

   60 lval: IDENT lval_ .

    $default  使用规则 60 以归约 (lval)


状态 90

   63 primaryexp: TOK_LPAR exp . TOK_RPAR

    TOK_RPAR  偏移，并进入状态 121


状态 91

   28 initval: TOK_LBRACKET TOK_RBRACKET .

    $default  使用规则 28 以归约 (initval)


状态 92

   27 initval: TOK_LBRACKET exp . initval_ TOK_RBRACKET initval

    TOK_COMMA  偏移，并进入状态 122

    $default  使用规则 31 以归约 (initval_)

    initval_  转到状态 123


状态 93

   70 unaryexp: unaryop unaryexp .

    $default  使用规则 70 以归约 (unaryexp)


状态 94

   77 mulexp: mulexp TOK_MUL . unaryexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 124
    unaryop     转到状态 59


状态 95

   78 mulexp: mulexp TOK_DIV . unaryexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 125
    unaryop     转到状态 59


状态 96

   79 mulexp: mulexp TOK_MODULO . unaryexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 126
    unaryop     转到状态 59


状态 97

   81 addexp: addexp TOK_ADD . addexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 127


状态 98

   82 addexp: addexp TOK_SUB . addexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 128


状态 99

   33 funcdef: TOK_VOID IDENT TOK_LPAR funcfparams TOK_RPAR block .

    $default  使用规则 33 以归约 (funcdef)


状态 100

   12 constdef_: TOK_LSQUARE INTCONST TOK_RSQUARE . constdef_

    TOK_LSQUARE  偏移，并进入状态 36

    $default  使用规则 13 以归约 (constdef_)

    constdef_  转到状态 129


状态 101

   15 constinitval: TOK_LBRACKET . TOK_RBRACKET
   16             | TOK_LBRACKET . constinitval constinitval_ TOK_RBRACKET

    TOK_ADD       偏移，并进入状态 46
    TOK_SUB       偏移，并进入状态 47
    TOK_NOT       偏移，并进入状态 48
    INTCONST      偏移，并进入状态 49
    IDENT         偏移，并进入状态 50
    TOK_LPAR      偏移，并进入状态 51
    TOK_LBRACKET  偏移，并进入状态 101
    TOK_RBRACKET  偏移，并进入状态 130

    constinitval  转到状态 131
    lval          转到状态 55
    primaryexp    转到状态 56
    number        转到状态 57
    unaryexp      转到状态 58
    unaryop       转到状态 59
    mulexp        转到状态 60
    addexp        转到状态 103
    constexp      转到状态 104


状态 102

   11 constdef: IDENT constdef_ TOK_ASSIGN constinitval .

    $default  使用规则 11 以归约 (constdef)


状态 103

   81 addexp: addexp . TOK_ADD addexp
   82       | addexp . TOK_SUB addexp
   95 constexp: addexp .

    TOK_ADD  偏移，并进入状态 97
    TOK_SUB  偏移，并进入状态 98

    $default  使用规则 95 以归约 (constexp)


状态 104

   14 constinitval: constexp .

    $default  使用规则 14 以归约 (constinitval)


状态 105

    9 constdecl_: TOK_COMMA constdef constdecl_ .

    $default  使用规则 9 以归约 (constdecl_)


状态 106

   38 funcfparam: TOK_INT IDENT TOK_LSQUARE TOK_RSQUARE . funcfparam_

    TOK_LSQUARE  偏移，并进入状态 132

    $default  使用规则 41 以归约 (funcfparam_)

    funcfparam_  转到状态 133


状态 107

   54 stmt: TOK_BREAK TOK_SEMICOLON .

    $default  使用规则 54 以归约 (stmt)


状态 108

   55 stmt: TOK_CONTINUE TOK_SEMICOLON .

    $default  使用规则 55 以归约 (stmt)


状态 109

   51 stmt: TOK_IF TOK_LPAR . cond TOK_RPAR stmt
   52     | TOK_IF TOK_LPAR . cond TOK_RPAR stmt TOK_ELSE stmt

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    cond        转到状态 134
    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 135
    relexp      转到状态 136
    eqexp       转到状态 137
    landexp     转到状态 138
    lorexp      转到状态 139


状态 110

   53 stmt: TOK_WHILE TOK_LPAR . cond TOK_RPAR stmt

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    cond        转到状态 140
    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 135
    relexp      转到状态 136
    eqexp       转到状态 137
    landexp     转到状态 138
    lorexp      转到状态 139


状态 111

   56 stmt: TOK_RETURN TOK_SEMICOLON .

    $default  使用规则 56 以归约 (stmt)


状态 112

   57 stmt: TOK_RETURN exp . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 141


状态 113

   42 block: TOK_LBRACKET block_ TOK_RBRACKET .

    $default  使用规则 42 以归约 (block)


状态 114

   43 block_: blockitem block_ .

    $default  使用规则 43 以归约 (block_)


状态 115

   49 stmt: exp TOK_SEMICOLON .

    $default  使用规则 49 以归约 (stmt)


状态 116

   47 stmt: lval TOK_ASSIGN . exp TOK_SEMICOLON

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    exp         转到状态 142
    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 117

   69 unaryexp: IDENT TOK_LPAR TOK_RPAR .

    $default  使用规则 69 以归约 (unaryexp)


状态 118

   74 funcrparams: exp . TOK_COMMA funcrparams
   75            | exp .

    TOK_COMMA  偏移，并进入状态 143

    $default  使用规则 75 以归约 (funcrparams)


状态 119

   68 unaryexp: IDENT TOK_LPAR funcrparams . TOK_RPAR

    TOK_RPAR  偏移，并进入状态 144


状态 120

   61 lval_: TOK_LSQUARE exp . TOK_RSQUARE lval_

    TOK_RSQUARE  偏移，并进入状态 145


状态 121

   63 primaryexp: TOK_LPAR exp TOK_RPAR .

    $default  使用规则 63 以归约 (primaryexp)


状态 122

   30 initval_: TOK_COMMA . exp initval_

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    exp         转到状态 146
    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 123

   27 initval: TOK_LBRACKET exp initval_ . TOK_RBRACKET initval

    TOK_RBRACKET  偏移，并进入状态 147


状态 124

   77 mulexp: mulexp TOK_MUL unaryexp .

    $default  使用规则 77 以归约 (mulexp)


状态 125

   78 mulexp: mulexp TOK_DIV unaryexp .

    $default  使用规则 78 以归约 (mulexp)


状态 126

   79 mulexp: mulexp TOK_MODULO unaryexp .

    $default  使用规则 79 以归约 (mulexp)


状态 127

   81 addexp: addexp . TOK_ADD addexp
   81       | addexp TOK_ADD addexp .
   82       | addexp . TOK_SUB addexp

    $default  使用规则 81 以归约 (addexp)


状态 128

   81 addexp: addexp . TOK_ADD addexp
   82       | addexp . TOK_SUB addexp
   82       | addexp TOK_SUB addexp .

    $default  使用规则 82 以归约 (addexp)


状态 129

   12 constdef_: TOK_LSQUARE INTCONST TOK_RSQUARE constdef_ .

    $default  使用规则 12 以归约 (constdef_)


状态 130

   15 constinitval: TOK_LBRACKET TOK_RBRACKET .

    $default  使用规则 15 以归约 (constinitval)


状态 131

   16 constinitval: TOK_LBRACKET constinitval . constinitval_ TOK_RBRACKET

    TOK_COMMA  偏移，并进入状态 148

    $default  使用规则 18 以归约 (constinitval_)

    constinitval_  转到状态 149


状态 132

   40 funcfparam_: TOK_LSQUARE . INTCONST TOK_RSQUARE funcfparam_

    INTCONST  偏移，并进入状态 150


状态 133

   38 funcfparam: TOK_INT IDENT TOK_LSQUARE TOK_RSQUARE funcfparam_ .

    $default  使用规则 38 以归约 (funcfparam)


状态 134

   51 stmt: TOK_IF TOK_LPAR cond . TOK_RPAR stmt
   52     | TOK_IF TOK_LPAR cond . TOK_RPAR stmt TOK_ELSE stmt

    TOK_RPAR  偏移，并进入状态 151


状态 135

   81 addexp: addexp . TOK_ADD addexp
   82       | addexp . TOK_SUB addexp
   83 relexp: addexp .

    TOK_ADD  偏移，并进入状态 97
    TOK_SUB  偏移，并进入状态 98

    $default  使用规则 83 以归约 (relexp)


状态 136

   84 relexp: relexp . TOK_LESS addexp
   85       | relexp . TOK_GREAT addexp
   86       | relexp . TOK_LESSEQ addexp
   87       | relexp . TOK_GREATEQ addexp
   88 eqexp: relexp .

    TOK_LESS     偏移，并进入状态 152
    TOK_LESSEQ   偏移，并进入状态 153
    TOK_GREAT    偏移，并进入状态 154
    TOK_GREATEQ  偏移，并进入状态 155

    $default  使用规则 88 以归约 (eqexp)


状态 137

   89 eqexp: eqexp . TOK_EQ relexp
   90      | eqexp . TOK_NOTEQ relexp
   91 landexp: eqexp .

    TOK_NOTEQ  偏移，并进入状态 156
    TOK_EQ     偏移，并进入状态 157

    $default  使用规则 91 以归约 (landexp)


状态 138

   92 landexp: landexp . TOK_AND eqexp
   93 lorexp: landexp .

    TOK_AND  偏移，并进入状态 158

    $default  使用规则 93 以归约 (lorexp)


状态 139

   59 cond: lorexp .
   94 lorexp: lorexp . TOK_OR landexp

    TOK_OR  偏移，并进入状态 159

    $default  使用规则 59 以归约 (cond)


状态 140

   53 stmt: TOK_WHILE TOK_LPAR cond . TOK_RPAR stmt

    TOK_RPAR  偏移，并进入状态 160


状态 141

   57 stmt: TOK_RETURN exp TOK_SEMICOLON .

    $default  使用规则 57 以归约 (stmt)


状态 142

   47 stmt: lval TOK_ASSIGN exp . TOK_SEMICOLON

    TOK_SEMICOLON  偏移，并进入状态 161


状态 143

   74 funcrparams: exp TOK_COMMA . funcrparams

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    exp          转到状态 118
    lval         转到状态 55
    primaryexp   转到状态 56
    number       转到状态 57
    unaryexp     转到状态 58
    unaryop      转到状态 59
    funcrparams  转到状态 162
    mulexp       转到状态 60
    addexp       转到状态 61


状态 144

   68 unaryexp: IDENT TOK_LPAR funcrparams TOK_RPAR .

    $default  使用规则 68 以归约 (unaryexp)


状态 145

   61 lval_: TOK_LSQUARE exp TOK_RSQUARE . lval_

    TOK_LSQUARE  偏移，并进入状态 88

    $default  使用规则 62 以归约 (lval_)

    lval_  转到状态 163


状态 146

   30 initval_: TOK_COMMA exp . initval_

    TOK_COMMA  偏移，并进入状态 122

    $default  使用规则 31 以归约 (initval_)

    initval_  转到状态 164


状态 147

   27 initval: TOK_LBRACKET exp initval_ TOK_RBRACKET . initval

    TOK_ADD       偏移，并进入状态 46
    TOK_SUB       偏移，并进入状态 47
    TOK_NOT       偏移，并进入状态 48
    INTCONST      偏移，并进入状态 49
    IDENT         偏移，并进入状态 50
    TOK_LPAR      偏移，并进入状态 51
    TOK_LBRACKET  偏移，并进入状态 52

    $default  使用规则 29 以归约 (initval)

    initval     转到状态 165
    exp         转到状态 54
    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 148

   17 constinitval_: TOK_COMMA . constinitval constinitval_

    TOK_ADD       偏移，并进入状态 46
    TOK_SUB       偏移，并进入状态 47
    TOK_NOT       偏移，并进入状态 48
    INTCONST      偏移，并进入状态 49
    IDENT         偏移，并进入状态 50
    TOK_LPAR      偏移，并进入状态 51
    TOK_LBRACKET  偏移，并进入状态 101

    constinitval  转到状态 166
    lval          转到状态 55
    primaryexp    转到状态 56
    number        转到状态 57
    unaryexp      转到状态 58
    unaryop       转到状态 59
    mulexp        转到状态 60
    addexp        转到状态 103
    constexp      转到状态 104


状态 149

   16 constinitval: TOK_LBRACKET constinitval constinitval_ . TOK_RBRACKET

    TOK_RBRACKET  偏移，并进入状态 167


状态 150

   40 funcfparam_: TOK_LSQUARE INTCONST . TOK_RSQUARE funcfparam_

    TOK_RSQUARE  偏移，并进入状态 168


状态 151

   51 stmt: TOK_IF TOK_LPAR cond TOK_RPAR . stmt
   52     | TOK_IF TOK_LPAR cond TOK_RPAR . stmt TOK_ELSE stmt

    TOK_ADD        偏移，并进入状态 46
    TOK_SUB        偏移，并进入状态 47
    TOK_NOT        偏移，并进入状态 48
    INTCONST       偏移，并进入状态 49
    IDENT          偏移，并进入状态 50
    TOK_LPAR       偏移，并进入状态 51
    TOK_LBRACKET   偏移，并进入状态 41
    TOK_SEMICOLON  偏移，并进入状态 71
    TOK_BREAK      偏移，并进入状态 72
    TOK_CONTINUE   偏移，并进入状态 73
    TOK_IF         偏移，并进入状态 74
    TOK_WHILE      偏移，并进入状态 75
    TOK_RETURN     偏移，并进入状态 76

    block       转到状态 78
    stmt        转到状态 169
    exp         转到状态 82
    lval        转到状态 83
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 152

   84 relexp: relexp TOK_LESS . addexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 170


状态 153

   86 relexp: relexp TOK_LESSEQ . addexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 171


状态 154

   85 relexp: relexp TOK_GREAT . addexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 172


状态 155

   87 relexp: relexp TOK_GREATEQ . addexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 173


状态 156

   90 eqexp: eqexp TOK_NOTEQ . relexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 135
    relexp      转到状态 174


状态 157

   89 eqexp: eqexp TOK_EQ . relexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 135
    relexp      转到状态 175


状态 158

   92 landexp: landexp TOK_AND . eqexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 135
    relexp      转到状态 136
    eqexp       转到状态 176


状态 159

   94 lorexp: lorexp TOK_OR . landexp

    TOK_ADD   偏移，并进入状态 46
    TOK_SUB   偏移，并进入状态 47
    TOK_NOT   偏移，并进入状态 48
    INTCONST  偏移，并进入状态 49
    IDENT     偏移，并进入状态 50
    TOK_LPAR  偏移，并进入状态 51

    lval        转到状态 55
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 135
    relexp      转到状态 136
    eqexp       转到状态 137
    landexp     转到状态 177


状态 160

   53 stmt: TOK_WHILE TOK_LPAR cond TOK_RPAR . stmt

    TOK_ADD        偏移，并进入状态 46
    TOK_SUB        偏移，并进入状态 47
    TOK_NOT        偏移，并进入状态 48
    INTCONST       偏移，并进入状态 49
    IDENT          偏移，并进入状态 50
    TOK_LPAR       偏移，并进入状态 51
    TOK_LBRACKET   偏移，并进入状态 41
    TOK_SEMICOLON  偏移，并进入状态 71
    TOK_BREAK      偏移，并进入状态 72
    TOK_CONTINUE   偏移，并进入状态 73
    TOK_IF         偏移，并进入状态 74
    TOK_WHILE      偏移，并进入状态 75
    TOK_RETURN     偏移，并进入状态 76

    block       转到状态 78
    stmt        转到状态 178
    exp         转到状态 82
    lval        转到状态 83
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 161

   47 stmt: lval TOK_ASSIGN exp TOK_SEMICOLON .

    $default  使用规则 47 以归约 (stmt)


状态 162

   74 funcrparams: exp TOK_COMMA funcrparams .

    $default  使用规则 74 以归约 (funcrparams)


状态 163

   61 lval_: TOK_LSQUARE exp TOK_RSQUARE lval_ .

    $default  使用规则 61 以归约 (lval_)


状态 164

   30 initval_: TOK_COMMA exp initval_ .

    $default  使用规则 30 以归约 (initval_)


状态 165

   27 initval: TOK_LBRACKET exp initval_ TOK_RBRACKET initval .

    $default  使用规则 27 以归约 (initval)


状态 166

   17 constinitval_: TOK_COMMA constinitval . constinitval_

    TOK_COMMA  偏移，并进入状态 148

    $default  使用规则 18 以归约 (constinitval_)

    constinitval_  转到状态 179


状态 167

   16 constinitval: TOK_LBRACKET constinitval constinitval_ TOK_RBRACKET .

    $default  使用规则 16 以归约 (constinitval)


状态 168

   40 funcfparam_: TOK_LSQUARE INTCONST TOK_RSQUARE . funcfparam_

    TOK_LSQUARE  偏移，并进入状态 132

    $default  使用规则 41 以归约 (funcfparam_)

    funcfparam_  转到状态 180


状态 169

   51 stmt: TOK_IF TOK_LPAR cond TOK_RPAR stmt .
   52     | TOK_IF TOK_LPAR cond TOK_RPAR stmt . TOK_ELSE stmt

    TOK_ELSE  偏移，并进入状态 181

    TOK_ELSE  [使用规则 51 以归约 (stmt)]
    $default  使用规则 51 以归约 (stmt)


状态 170

   81 addexp: addexp . TOK_ADD addexp
   82       | addexp . TOK_SUB addexp
   84 relexp: relexp TOK_LESS addexp .

    TOK_ADD  偏移，并进入状态 97
    TOK_SUB  偏移，并进入状态 98

    $default  使用规则 84 以归约 (relexp)


状态 171

   81 addexp: addexp . TOK_ADD addexp
   82       | addexp . TOK_SUB addexp
   86 relexp: relexp TOK_LESSEQ addexp .

    TOK_ADD  偏移，并进入状态 97
    TOK_SUB  偏移，并进入状态 98

    $default  使用规则 86 以归约 (relexp)


状态 172

   81 addexp: addexp . TOK_ADD addexp
   82       | addexp . TOK_SUB addexp
   85 relexp: relexp TOK_GREAT addexp .

    TOK_ADD  偏移，并进入状态 97
    TOK_SUB  偏移，并进入状态 98

    $default  使用规则 85 以归约 (relexp)


状态 173

   81 addexp: addexp . TOK_ADD addexp
   82       | addexp . TOK_SUB addexp
   87 relexp: relexp TOK_GREATEQ addexp .

    TOK_ADD  偏移，并进入状态 97
    TOK_SUB  偏移，并进入状态 98

    $default  使用规则 87 以归约 (relexp)


状态 174

   84 relexp: relexp . TOK_LESS addexp
   85       | relexp . TOK_GREAT addexp
   86       | relexp . TOK_LESSEQ addexp
   87       | relexp . TOK_GREATEQ addexp
   90 eqexp: eqexp TOK_NOTEQ relexp .

    TOK_LESS     偏移，并进入状态 152
    TOK_LESSEQ   偏移，并进入状态 153
    TOK_GREAT    偏移，并进入状态 154
    TOK_GREATEQ  偏移，并进入状态 155

    $default  使用规则 90 以归约 (eqexp)


状态 175

   84 relexp: relexp . TOK_LESS addexp
   85       | relexp . TOK_GREAT addexp
   86       | relexp . TOK_LESSEQ addexp
   87       | relexp . TOK_GREATEQ addexp
   89 eqexp: eqexp TOK_EQ relexp .

    TOK_LESS     偏移，并进入状态 152
    TOK_LESSEQ   偏移，并进入状态 153
    TOK_GREAT    偏移，并进入状态 154
    TOK_GREATEQ  偏移，并进入状态 155

    $default  使用规则 89 以归约 (eqexp)


状态 176

   89 eqexp: eqexp . TOK_EQ relexp
   90      | eqexp . TOK_NOTEQ relexp
   92 landexp: landexp TOK_AND eqexp .

    TOK_NOTEQ  偏移，并进入状态 156
    TOK_EQ     偏移，并进入状态 157

    $default  使用规则 92 以归约 (landexp)


状态 177

   92 landexp: landexp . TOK_AND eqexp
   94 lorexp: lorexp TOK_OR landexp .

    TOK_AND  偏移，并进入状态 158

    $default  使用规则 94 以归约 (lorexp)


状态 178

   53 stmt: TOK_WHILE TOK_LPAR cond TOK_RPAR stmt .

    $default  使用规则 53 以归约 (stmt)


状态 179

   17 constinitval_: TOK_COMMA constinitval constinitval_ .

    $default  使用规则 17 以归约 (constinitval_)


状态 180

   40 funcfparam_: TOK_LSQUARE INTCONST TOK_RSQUARE funcfparam_ .

    $default  使用规则 40 以归约 (funcfparam_)


状态 181

   52 stmt: TOK_IF TOK_LPAR cond TOK_RPAR stmt TOK_ELSE . stmt

    TOK_ADD        偏移，并进入状态 46
    TOK_SUB        偏移，并进入状态 47
    TOK_NOT        偏移，并进入状态 48
    INTCONST       偏移，并进入状态 49
    IDENT          偏移，并进入状态 50
    TOK_LPAR       偏移，并进入状态 51
    TOK_LBRACKET   偏移，并进入状态 41
    TOK_SEMICOLON  偏移，并进入状态 71
    TOK_BREAK      偏移，并进入状态 72
    TOK_CONTINUE   偏移，并进入状态 73
    TOK_IF         偏移，并进入状态 74
    TOK_WHILE      偏移，并进入状态 75
    TOK_RETURN     偏移，并进入状态 76

    block       转到状态 78
    stmt        转到状态 182
    exp         转到状态 82
    lval        转到状态 83
    primaryexp  转到状态 56
    number      转到状态 57
    unaryexp    转到状态 58
    unaryop     转到状态 59
    mulexp      转到状态 60
    addexp      转到状态 61


状态 182

   52 stmt: TOK_IF TOK_LPAR cond TOK_RPAR stmt TOK_ELSE stmt .

    $default  使用规则 52 以归约 (stmt)
